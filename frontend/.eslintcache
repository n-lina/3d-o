[{"C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\index.js":"1","C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\components\\App.jsx":"2","C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\models\\RootStoreContext.js":"3","C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\models\\ColoringForm.js":"4","C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\models\\SwanStore.js":"5","C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\pages\\contact.js":"6","C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\pages\\landing.js":"7","C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\pages\\browse.js":"8","C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\pages\\create-figurine.js":"9","C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\pages\\result.js":"10","C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\models\\DrawingSectionModel.js":"11","C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\components\\Navbar\\index.js":"12","C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\components\\Static\\index.js":"13","C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\components\\DrawingSection\\index.js":"14","C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\components\\Bottom\\index.js":"15","C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\components\\ResultFigurine\\index.js":"16","C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\models\\PxModel.js":"17","C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\components\\SpecialRow\\index.js":"18","C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\components\\UntrackedRow\\index.js":"19","C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\components\\Row\\index.js":"20","C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\components\\Pixel\\index.js":"21","C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\models\\FigurineStore.js":"22","C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\pages\\gallery.js":"23","C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\firebase.js":"24","C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\pages\\create.js":"25","C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\components\\Appendages\\index.js":"26","C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\components\\Vase\\index.js":"27","C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\components\\BunnyOrHandle\\index.js":"28","C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\components\\Basket\\index.js":"29","C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\components\\UntrackedOrigamiObject\\index.js":"30","C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\components\\UntrackedPixel\\index.js":"31","C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\pages\\learn.js":"32","C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\pages\\about.js":"33","C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\models\\VaseStore.js":"34","C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\pages\\login.js":"35","C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\pages\\create-basket.js":"36","C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\components\\OrigamiObject\\index.js":"37","C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\components\\Sphere\\index.js":"38","C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\components\\Rim\\index.js":"39","C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\components\\Figurine\\index.js":"40","C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\pages\\create-swan.js":"41","C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\models\\RowModel.js":"42","C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\components\\Swan\\index.js":"43","C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\components\\UntrackedDrawingSection\\index.js":"44","C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\components\\Navbar\\NavbarElements.js":"45","C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\components\\Wing\\index.js":"46","C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\pages\\create-vase.js":"47","C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\components\\SpecialPixel\\index.js":"48"},{"size":289,"mtime":1662368829531,"results":"49","hashOfConfig":"50"},{"size":1079,"mtime":1662368829499,"results":"51","hashOfConfig":"50"},{"size":1233,"mtime":1662368829536,"results":"52","hashOfConfig":"50"},{"size":6079,"mtime":1662368829533,"results":"53","hashOfConfig":"50"},{"size":6044,"mtime":1662368829537,"results":"54","hashOfConfig":"50"},{"size":1345,"mtime":1662368829541,"results":"55","hashOfConfig":"50"},{"size":4986,"mtime":1662368829548,"results":"56","hashOfConfig":"50"},{"size":7089,"mtime":1662442435554,"results":"57","hashOfConfig":"50"},{"size":7131,"mtime":1662368829543,"results":"58","hashOfConfig":"50"},{"size":5173,"mtime":1662368829551,"results":"59","hashOfConfig":"50"},{"size":651,"mtime":1662368829533,"results":"60","hashOfConfig":"50"},{"size":1619,"mtime":1662368829509,"results":"61","hashOfConfig":"50"},{"size":4073,"mtime":1662440592258,"results":"62","hashOfConfig":"50"},{"size":4219,"mtime":1662368829506,"results":"63","hashOfConfig":"50"},{"size":3393,"mtime":1662368829503,"results":"64","hashOfConfig":"50"},{"size":10897,"mtime":1662368829513,"results":"65","hashOfConfig":"50"},{"size":542,"mtime":1662368829535,"results":"66","hashOfConfig":"50"},{"size":1128,"mtime":1662368829519,"results":"67","hashOfConfig":"50"},{"size":774,"mtime":1662368829528,"results":"68","hashOfConfig":"50"},{"size":917,"mtime":1662368829516,"results":"69","hashOfConfig":"50"},{"size":2161,"mtime":1662368829511,"results":"70","hashOfConfig":"50"},{"size":10290,"mtime":1662368829534,"results":"71","hashOfConfig":"50"},{"size":297,"mtime":1662368829547,"results":"72","hashOfConfig":"50"},{"size":584,"mtime":1662368829530,"results":"73","hashOfConfig":"50"},{"size":1870,"mtime":1662442474421,"results":"74","hashOfConfig":"50"},{"size":5942,"mtime":1662368829500,"results":"75","hashOfConfig":"50"},{"size":5249,"mtime":1662368829529,"results":"76","hashOfConfig":"50"},{"size":1489,"mtime":1662368829504,"results":"77","hashOfConfig":"50"},{"size":9132,"mtime":1662368829502,"results":"78","hashOfConfig":"50"},{"size":3656,"mtime":1662368829526,"results":"79","hashOfConfig":"50"},{"size":2251,"mtime":1662368829527,"results":"80","hashOfConfig":"50"},{"size":4710,"mtime":1662442237014,"results":"81","hashOfConfig":"50"},{"size":5922,"mtime":1662440418261,"results":"82","hashOfConfig":"50"},{"size":21946,"mtime":1662368829538,"results":"83","hashOfConfig":"50"},{"size":485,"mtime":1662368829549,"results":"84","hashOfConfig":"50"},{"size":11835,"mtime":1662368829542,"results":"85","hashOfConfig":"50"},{"size":4832,"mtime":1662368829510,"results":"86","hashOfConfig":"50"},{"size":849,"mtime":1662368829521,"results":"87","hashOfConfig":"50"},{"size":1144,"mtime":1662368829515,"results":"88","hashOfConfig":"50"},{"size":10380,"mtime":1662368829507,"results":"89","hashOfConfig":"50"},{"size":7058,"mtime":1662368829544,"results":"90","hashOfConfig":"50"},{"size":685,"mtime":1662368829536,"results":"91","hashOfConfig":"50"},{"size":12392,"mtime":1662368829523,"results":"92","hashOfConfig":"50"},{"size":2256,"mtime":1662368829525,"results":"93","hashOfConfig":"50"},{"size":2441,"mtime":1662368829508,"results":"94","hashOfConfig":"50"},{"size":3993,"mtime":1662386667863,"results":"95","hashOfConfig":"50"},{"size":13781,"mtime":1662368829545,"results":"96","hashOfConfig":"50"},{"size":1263,"mtime":1662368829518,"results":"97","hashOfConfig":"50"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"odn60e",{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"106"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"113"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"106"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"102"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"113"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"129","messages":"130","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"113"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"106"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"109"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"143"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"106"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"113"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"109"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"102"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"165","messages":"166","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"102"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"102"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"106"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"102"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"181","messages":"182","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"102"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"113"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"102"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"109"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"204","messages":"205","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"102"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"113"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"212","messages":"213","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"214","messages":"215","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216","usedDeprecatedRules":"102"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"219","messages":"220","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"221","messages":"222","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"223","messages":"224","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\index.js",[],"C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\components\\App.jsx",[],["225","226"],"C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\models\\RootStoreContext.js",["227","228","229"],"import React, { createContext, useContext } from \"react\";\r\nimport RootStore from \"./RootStore\";\r\n\r\n/**\r\n * Create a context we can use to\r\n * - Provide access to our stores from our root component\r\n * - Consume stores in our screens (or other components, though it's\r\n *   preferable to just connect screens)\r\n */\r\n// const RootStoreContext = createContext();\r\n\r\n// /**\r\n//  * The provider our root component will use to expose the root store\r\n//  */\r\n// export const RootStoreProvider = RootStoreContext.Provider;\r\n\r\n// /**\r\n//  * A hook that screens can use to gain access to our stores, with\r\n//  * `const { someStore, someOtherStore } = useStores()`,\r\n//  * or less likely: `const rootStore = useStores()`\r\n//  */\r\n// export const useStores = () => useContext(RootStoreContext);\r\n\r\n//------------------------------------------------------------------\r\n\r\nconst RootStoreContext = React.createContext();\r\n\r\nexport const RootStoreProvider = RootStoreContext.Provider;\r\n\r\n\r\n// export const RootStoreProvider = ({ children, store }) => {\r\n//     return (\r\n//       <RootStoreContext.Provider value={store}>{children}</RootStoreContext.Provider>\r\n//     );\r\n// };\r\n\r\nexport const useStores = () => React.useContext(RootStoreContext);\r\n",["230","231"],"C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\models\\ColoringForm.js",[],["232","233"],"C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\models\\SwanStore.js",["234","235","236"],"import { types } from \"mobx-state-tree\";\r\nimport * as THREE from \"three\";\r\nimport React from \"react\"\r\n\r\nfunction getCurvePointsSwan(_pts, tension, numOfSegments) {\r\n\r\n    var res = [],    // clone array\r\n        x, y,           // our x,y coords\r\n        t1x, t2x, t1y, t2y, // tension vectors\r\n        c1, c2, c3, c4,     // cardinal points\r\n        st, t, i;       // steps based on num. of segments\r\n\r\n    const first_x = _pts[0]\r\n    const first_y = _pts[1]\r\n    const last_x = _pts[4]\r\n    const last_y = _pts[5]\r\n\r\n    _pts.unshift(first_y)\r\n    _pts.unshift(first_x)\r\n    _pts.push(last_x)\r\n    _pts.push(last_y)\r\n\r\n    for (i=2; i < (_pts.length - 4); i+=2) {\r\n        for (t=0; t <= numOfSegments; t++) {\r\n\r\n            // calc tension vectors\r\n            t1x = (_pts[i+2] - _pts[i-2]) * tension;\r\n            t2x = (_pts[i+4] - _pts[i]) * tension;\r\n\r\n            t1y = (_pts[i+3] - _pts[i-1]) * tension;\r\n            t2y = (_pts[i+5] - _pts[i+1]) * tension;\r\n\r\n            // calc step\r\n            st = t / numOfSegments;\r\n\r\n            // calc cardinals\r\n            c1 =   2 * Math.pow(st, 3)  - 3 * Math.pow(st, 2) + 1; \r\n            c2 = -(2 * Math.pow(st, 3)) + 3 * Math.pow(st, 2); \r\n            c3 =       Math.pow(st, 3)  - 2 * Math.pow(st, 2) + st; \r\n            c4 =       Math.pow(st, 3)  -     Math.pow(st, 2);\r\n\r\n            // calc x and y cords with common control vectors\r\n            x = c1 * _pts[i]    + c2 * _pts[i+2] + c3 * t1x + c4 * t2x;\r\n            y = c1 * _pts[i+1]  + c2 * _pts[i+3] + c3 * t1y + c4 * t2y;\r\n\r\n            //store points in array\r\n            res.push(x);\r\n            res.push(Math.max(0.5, y));\r\n\r\n        }\r\n    }\r\n    return res;\r\n}\r\n\r\nconst SwanStore = types\r\n  .model(\"Swan\", {\r\n    maxWidth: 0,\r\n    cm: true,\r\n    diameter: 16,\r\n    body_height: 0.35,\r\n    top_scale: 1,\r\n    bottom_scale:0.6, \r\n    height_scale: 0.4,\r\n    default_color: \"#FFFFFF\", \r\n    wings: true, // true = two wings\r\n    bottom_rim: true,\r\n    texture: \"\", \r\n    upsize: false,\r\n    modelDimensions: types.optional(types.array(types.array(types.number)), [[8, 2]]), // top to bottom, only one element\r\n    // unused, only for consistency: \r\n    flat_bottom: false,\r\n    top_rim: false, \r\n    arms: false, \r\n    ears: \"\", \r\n    lid: false, \r\n    top_handle: false, \r\n    side_handles: false, \r\n  })\r\n  .actions(self => ({\r\n    in_to_cm(){\r\n        const conv = 2.54\r\n        self.diameter = Math.round(self.diameter * conv)\r\n        self.cm = true\r\n    },\r\n    cm_to_in(){\r\n        const conv = 2.54\r\n        self.diameter = Math.round(self.diameter / conv)\r\n        self.cm = false\r\n    },\r\n    update_units(units){\r\n        if (self.cm == units) return \r\n        // changing from in to cm\r\n        if (self.cm == false && units == true){\r\n            self.in_to_cm()\r\n        }\r\n        // changing from cm to in\r\n        else{\r\n            self.cm_to_in()\r\n        }\r\n        self.cm = units\r\n    },\r\n    update_wings(val){\r\n        self.wings = val\r\n    },\r\n    update_bottom_rim(val){\r\n        self.bottom_rim = val\r\n    },\r\n    update_diameter(d){\r\n        self.diameter = d\r\n    }, \r\n    storePic(picData){\r\n        self.texture = picData\r\n    },\r\n    clearTextures(){\r\n        self.texture = \"\"\r\n    },\r\n    setDefaultColor(color){\r\n        self.default_color = color\r\n    },\r\n    cmToPcs(cm, height=false){\r\n        const height_factor = self.upsize? 0.7: 0.55 // 0.5 cm height per row\r\n        const width_factor = self.upsize? 1.2 : 0.8 // 0.8 cm width per pc\r\n        if (height){\r\n            return Math.round(cm/height_factor)\r\n        }\r\n        return Math.round(cm/width_factor)\r\n    },\r\n    setSize(){\r\n        const conv = 2.54\r\n        const diameter_cm = self.cm ? self.diameter : self.diameter * conv\r\n        if (diameter_cm > 25){\r\n            self.upsize = true\r\n        }\r\n    },\r\n    getDimensions() {\r\n        // INPUTS \r\n        // diameter: 30,\r\n\r\n        // OUTPUTS\r\n        // modelDimensions: types.optional(types.array(types.array(types.number)), [[43, 10]]\r\n\r\n        // convert from in to cm first \r\n        let diameter = self.diameter * self.bottom_scale \r\n\r\n        if (!self.cm) {\r\n            const conv = 2.54\r\n            diameter = Math.round(self.diameter * self.bottom_scale * conv)\r\n        }\r\n\r\n        const height_input = diameter\r\n\r\n        const circ_pcs = self.cmToPcs(Math.PI * diameter)\r\n        const height = self.cmToPcs(height_input, true)\r\n        const modelDimensions = [[circ_pcs, height]]\r\n        \r\n        self.maxWidth = circ_pcs\r\n        self.modelDimensions = modelDimensions\r\n        return modelDimensions\r\n    },\r\n    swanBodyPts(){\r\n        let display_diameter = self.diameter\r\n        if (!self.cm){\r\n            display_diameter = Math.round(display_diameter * 2.54)\r\n        }\r\n        const s_dtop_h = display_diameter * self.height_scale\r\n        const s_dbottom_h = -1 * s_dtop_h * 0.8\r\n\r\n        const s_bottom = display_diameter * self.bottom_scale\r\n        const s_top = display_diameter * self.top_scale\r\n\r\n        const s_diameter = display_diameter\r\n        const s_diameter_h = 0\r\n\r\n        var myPoints = [s_dbottom_h,s_bottom/2, s_diameter_h,s_diameter/2, s_dtop_h,s_top/2]; \r\n        var tension = 0.65\r\n        var numOfSegments = 10\r\n        let points = [];\r\n        const new_pts = getCurvePointsSwan(myPoints, tension, numOfSegments)\r\n        for (let i=0; i<new_pts.length; i+=2){\r\n            const h = new_pts[i]\r\n            const r = new_pts[i+1]\r\n            points.push( new THREE.Vector2(r, h));\r\n        }\r\n        return points\r\n    }\r\n  }))\r\n  .views(self => ({\r\n  }));\r\n\r\nexport default SwanStore;\r\n\r\nconst SwanContext = React.createContext();\r\n\r\nexport const SwanProvider = ({ children, store }) => {\r\n    return (\r\n      <SwanContext.Provider value={store}>{children}</SwanContext.Provider>\r\n    );\r\n  };\r\n\r\nexport const useSwanStore = () => React.useContext(SwanContext);\r\n\r\nexport const withSwanStore = (Component) => (props) => {\r\n    return <Component {...props} store={useSwanStore()} />;\r\n  };",["237","238"],"C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\pages\\contact.js",["239","240","241","242"],"import React from 'react';\r\nimport bg from \"../assets/logo-bg.png\"\r\n// import bgOff from \"../assets/logo-bg-off.png\"\r\nimport straw from \"../assets/strawberry-slider-big.png\"\r\nimport \"./create-vase.css\"\r\n\r\nconst Contact = () => {\r\n  return (\r\n    <div\r\n      style={{\r\n        height: '486px',\r\n        backgroundImage: `url(${bg})`, \r\n        backgroundPosition: \"50%\"\r\n      }}\r\n    >\r\n      <div className=\"info-box\" >\r\n        <img src={straw} alt={\"\"} className =\"straw-l\"/>\r\n        <img src={straw} alt={\"\"} className =\"straw-m\"/>\r\n        <img src={straw} alt={\"\"} className =\"straw-r\"/>\r\n        <p className = \"app-name\">3d-o<br/>engineering x art</p>\r\n        <p className = \"name\">— lina nguyen —</p>\r\n        <div className=\"left\">\r\n          <a href=\"https://www.linkedin.com/in/nlina/\" target=\"_blank\" className=\"link\">linkedin</a>\r\n          <br/>\r\n          <a href=\"https://github.com/n-lina/n-lina/raw/main/Lina%20Nguyen%20Grad2022%20Resume.pdf\" target=\"_blank\" className=\"link\">resume</a>\r\n        </div>\r\n        <div className=\"right\">\r\n          <a href=\"https://github.com/n-lina\" target=\"_blank\" className=\"link\">github</a>\r\n          <br/>\r\n          <a href=\"mailto:linanguyen@alumni.ubc.ca\" target=\"_blank\" className=\"link\">email</a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Contact;\r\n","C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\pages\\landing.js",[],"C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\pages\\browse.js",["243"],"import React from \"react\";\r\nimport straw from \"../assets/strawberry-slider-big.png\";\r\nimport \"./create.css\";\r\nimport { HashLink } from \"react-router-hash-link\";\r\nimport { FiDownload } from \"react-icons/fi\";\r\nimport b_hnd_med_12 from \"../assets/browse/basket_hndl_med_12h.jpg\";\r\nimport b_lid_med_5 from \"../assets/browse/basket_lid_med_5h.jpg\";\r\nimport b_lid_med_10 from \"../assets/browse/basket_lid_med_10h.jpg\";\r\nimport f_bear_med_7 from \"../assets/browse/fig_bear_med_7h.jpg\";\r\nimport f_bear_med_8 from \"../assets/browse/fig_bear_med_8h.jpg\";\r\nimport f_bun_ez_8 from \"../assets/browse/fig_bun_ez_8h.jpg\";\r\nimport f_cat_ez_8 from \"../assets/browse/fig_cat_ez_8h.jpg\";\r\nimport s_ez_1w_2_2 from \"../assets/browse/swan_ez_1w_2h_2.jpg\";\r\nimport s_ez_1w_2 from \"../assets/browse/swan_ez_1w_2h.jpg\";\r\nimport s_ez_1w_3 from \"../assets/browse/swan_ez_1w_3h.jpg\";\r\nimport s_ez_1w_4 from \"../assets/browse/swan_ez_1w_4h.jpg\";\r\nimport s_ez_2w_2 from \"../assets/browse/swan_ez_2w_2h.jpg\";\r\nimport s_ez_2w_4 from \"../assets/browse/swan_ez_2w_4h.jpg\";\r\nimport s_med_1w_4 from \"../assets/browse/swan_med_1w_8h.jpg\";\r\nimport v_bot_cov_hard_20 from \"../assets/browse/vase_bot_cov_hard_20h.jpg\";\r\nimport v_bot_cov_med_10 from \"../assets/browse/vase_bot_cov_med_10h.jpg\";\r\nimport v_hard_25 from \"../assets/browse/vase_hard_25h.jpg\";\r\nimport v_top_bot_rim_hard_40 from \"../assets/browse/vase_top_bot_rim_hard_40h.jpg\";\r\nimport placeholder from \"../assets/browse/placeholder.PNG\";\r\n\r\nconst Browse = () => {\r\n  // function loadColoringPage(model){\r\n  //   if (model === \"swan\"){\r\n  //     coloringFormStore.setPreload()\r\n  //     coloringFormStore.preloadDefaultColor(\"#000000\")\r\n  //     coloringFormStore.setModel(\"swan\", swanStore.wings)\r\n  //     // set swan dimensions so SwanStore can do the calcs to getDimensions\r\n  //   }\r\n  // }\r\n\r\n  const swans = [\r\n    [s_ez_1w_2, \"easy\", 2],\r\n    [s_ez_1w_2_2, \"easy\", 2],\r\n    [s_ez_2w_2, \"easy\", 2],\r\n    [s_ez_1w_3, \"easy\", 3],\r\n    [s_ez_1w_4, \"easy\", 4],\r\n    [s_ez_2w_4, \"easy\", 4],\r\n    [s_med_1w_4, \"medium\", 4],\r\n  ];\r\n\r\n  const figs = [\r\n    [f_bun_ez_8, \"easy\", 8],\r\n    [f_cat_ez_8, \"easy\", 8],\r\n    [f_bear_med_7, \"medium\", 7],\r\n    [f_bear_med_8, \"medium\", 8],\r\n  ];\r\n\r\n  const baskets = [\r\n    [b_lid_med_5, \"medium\", 5],\r\n    [b_lid_med_10, \"medium\", 10],\r\n    [b_hnd_med_12, \"medium\", 12],\r\n  ];\r\n\r\n  const vases = [\r\n    [v_bot_cov_med_10, \"medium\", 10],\r\n    [v_bot_cov_hard_20, \"hard\", 20],\r\n    [v_hard_25, \"hard\", 25],\r\n    [v_top_bot_rim_hard_40, \"hard\", 40],\r\n  ];\r\n\r\n  const len_swans = swans.length;\r\n  const len_figs = figs.length;\r\n  const len_baskets = baskets.length;\r\n  const len_vases = vases.length;\r\n\r\n  const TODO_SZ = \"1/32\";\r\n  const TODO_NUM = \"1432\";\r\n\r\n  function element(key, img, difficulty, hours) {\r\n    return (\r\n      <div key={key} className=\"browse-el-holder\">\r\n        <div className=\"browse-straw-num\">\r\n          <div\r\n            className=\"browse-straw-text\"\r\n            style={{ marginLeft: key + 1 >= 10 ? 25 : 35 }}\r\n          >\r\n            {key + 1}\r\n          </div>\r\n        </div>\r\n        <img className=\"browse-img\" src={img} alt={\"\"} />\r\n        <div className=\"browse-el-info\">\r\n          <div className=\"browse-info\">\r\n            <p className=\"browse-el-text\">\r\n              {\" \"}\r\n              difficulty: <span>{difficulty}</span>\r\n            </p>\r\n            <p className=\"browse-el-text\">\r\n              {\" \"}\r\n              estimated time: <span>{hours} h</span>\r\n            </p>\r\n            <p className=\"browse-el-text\">\r\n              {\" \"}\r\n              piece size: <span>{TODO_SZ}</span>\r\n            </p>\r\n            <p className=\"browse-el-text\">\r\n              {\" \"}\r\n              # of pieces: <span>{TODO_NUM}</span>\r\n            </p>\r\n          </div>\r\n        </div>\r\n        <img className=\"browse-diag\" src={placeholder} alt={\"\"} />\r\n        <div\r\n          className=\"browse-done-button\"\r\n          onClick={() => console.log(\"hello\")}\r\n        >\r\n          <p className=\"browse-download-label\">\r\n            <span>\r\n              <FiDownload size={17} />\r\n            </span>{\" \"}\r\n            download 3d-o diagram{\" \"}\r\n            <span>\r\n              <FiDownload size={17} />\r\n            </span>\r\n          </p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div id=\"top\">\r\n      <div className=\"holderTop\">\r\n        {/* <img src={straw} alt={\"\"} className=\"leftS\" style={{ left: \"35%\" }} /> */}\r\n        <p className=\"create-text\">🍓 ' . ` browse pre-made designs ` . ' 🍓</p>\r\n        {/* <img src={straw} alt={\"\"} className=\"rightS\" style={{ right: \"35%\" }} /> */}\r\n      </div>\r\n      <div\r\n        style={{\r\n          flexDirection: \"row\",\r\n          height: \"150px\",\r\n        }}\r\n      >\r\n        <div className=\"holder\">\r\n          <HashLink style={{ color: \"#D14240\" }} to=\"/browse#figurine\">\r\n            <img src={straw} alt={\"\"} className=\"tabS-left\" />\r\n            <p className=\"browse-tab\">• figurine •</p>\r\n          </HashLink>\r\n          <HashLink style={{ color: \"#D14240\" }} to=\"/browse#vase\">\r\n            <img src={straw} alt={\"\"} className=\"tabS-right\" />\r\n            <p className=\"browse-tab\">• vase •</p>\r\n          </HashLink>\r\n          <HashLink style={{ color: \"#D14240\" }} to=\"/browse#basket\">\r\n            <img src={straw} alt={\"\"} className=\"tabS-left\" />\r\n            <p className=\"browse-tab\">• basket •</p>\r\n          </HashLink>\r\n          <HashLink style={{ color: \"#D14240\" }} to=\"/browse#swan\">\r\n            <img src={straw} alt={\"\"} className=\"tabS-right\" />\r\n            <p className=\"browse-tab\">• swan •</p>\r\n          </HashLink>\r\n        </div>\r\n      </div>\r\n      <div id=\"figurine\" className=\"holderTop\">\r\n        <p className=\"create-text\">🍓 ' . ` figurine ` . ' 🍓</p>\r\n      </div>\r\n      {figs.map((entry, i) => element(i, entry[0], entry[1], entry[2]))}\r\n      <div id=\"vase\" className=\"holderTop\">\r\n        <p className=\"create-text\">🍓 ' . ` vase ` . ' 🍓</p>\r\n      </div>\r\n      {vases.map((entry, i) =>\r\n        element(len_figs + i, entry[0], entry[1], entry[2])\r\n      )}\r\n      <div id=\"basket\" className=\"holderTop\">\r\n        <p className=\"create-text\">🍓 ' . ` basket ` . ' 🍓</p>\r\n      </div>\r\n      {baskets.map((entry, i) =>\r\n        element(len_figs + len_vases + i, entry[0], entry[1], entry[2])\r\n      )}\r\n      <div id=\"swan\" className=\"holderTop\">\r\n        <p className=\"create-text\">🍓 ' . ` swan ` . ' 🍓</p>\r\n      </div>\r\n      {swans.map((entry, i) =>\r\n        element(\r\n          len_figs + len_vases + len_baskets + i,\r\n          entry[0],\r\n          entry[1],\r\n          entry[2]\r\n        )\r\n      )}\r\n      <div style={{ height: 160 }}>\r\n        <HashLink style={{ color: \"#D14240\" }} to=\"/browse#top\">\r\n          <img src={straw} alt={\"\"} className=\"tabS\" />\r\n          <p\r\n            className=\"browse-tab\"\r\n            style={{ width: 150, marginLeft: \"calc(50% - 90px)\" }}\r\n          >\r\n            • scroll to top •\r\n          </p>\r\n        </HashLink>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Browse;\r\n","C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\pages\\create-figurine.js",["244","245"],"import React, {useEffect} from \"react\";\r\nimport {\r\n  NavBtn,\r\n  NavBtnLink\r\n} from '../components/Navbar/NavbarElements';\r\nimport { Canvas} from \"react-three-fiber\";\r\nimport Figurine from \"../components/Figurine\"\r\nimport './create-vase.css'\r\nimport { Slider, Rail, Handles} from \"react-compound-slider\";\r\nimport SwitchSelector from \"react-switch-selector\";\r\nimport { observer } from \"mobx-react\";\r\nimport { useStores } from \"../models/RootStoreContext\"\r\nimport firebase from 'firebase/app'\r\nimport { firestore } from \"../firebase\"\r\n\r\nconst CreateFigurine = () => {\r\n\r\n  const { figStore, coloringFormStore} = useStores();\r\n\r\n  useEffect(() => {\r\n    coloringFormStore.setMsg(true, \"error\")\r\n    coloringFormStore.clearColoringForm()\r\n    coloringFormStore.setModel(\"fig\")\r\n  }, [])\r\n\r\n  const options = [\r\n    {\r\n        label: \"y\",\r\n        value: true,\r\n        selectedBackgroundColor: \"#E28988\",\r\n    },  {\r\n        label: \"n\",\r\n        value: false,\r\n        selectedBackgroundColor: \"#E28988\"\r\n    }\r\n  ];\r\n\r\n  const ears_options = [\r\n    {\r\n        label: \"◠ ◠\",\r\n        value: \"bear\",\r\n        selectedBackgroundColor: \"#E28988\",\r\n    },  {\r\n        label: \"〇 〇\",\r\n        value: \"sphere\",\r\n        selectedBackgroundColor: \"#E28988\"\r\n    },  {\r\n        label: \"∧ ∧\",\r\n        value: \"cat\",\r\n        selectedBackgroundColor: \"#E28988\"\r\n    },  {\r\n        label: \"∩ ∩\",\r\n        value: \"bunny\",\r\n        selectedBackgroundColor: \"#E28988\"\r\n    },\r\n  ];\r\n\r\n  const ears = [\"bear\", \"sphere\", \"cat\", \"bunny\"]\r\n  \r\n  const unitOptions = [\r\n    {\r\n        label: \"cm\",\r\n        value: true,\r\n        selectedBackgroundColor: \"#E28988\",\r\n    },  {\r\n        label: \"in\",\r\n        value: false,\r\n        selectedBackgroundColor: \"#E28988\"\r\n    }\r\n  ];\r\n\r\n  const sliderStyle = {  // Give the slider some width\r\n    position: 'relative',\r\n    width: '100%',\r\n    height: 15,\r\n    // border: '1px solid steelblue',\r\n  }\r\n  \r\n  const railStyle = {\r\n    position: 'absolute',\r\n    width: '100%',\r\n    height: 9,\r\n    // marginTop: 35,\r\n    borderRadius: 5,\r\n    backgroundColor: 'pink',\r\n  }\r\n  \r\n  function Handle({\r\n    handle: { id, value, percent },\r\n    getHandleProps\r\n  }) {\r\n    return (\r\n      <div className = \"straw\"\r\n        style={{\r\n          left: `${percent}%`,\r\n          position: 'absolute',\r\n          marginLeft: -15,\r\n          marginTop: -20,\r\n          zIndex: 2,\r\n          textAlign: 'right',\r\n          cursor: 'pointer',\r\n        }}\r\n        {...getHandleProps(id)}\r\n      >\r\n        <div style={{ fontFamily: 'Arial', fontSize: 16, marginTop: 15, marginLeft: 5, position:'absolute', zIndex: 3, color: \"#fff\"}}>\r\n          {value}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n    \r\n  // cm\r\n  let min_d = 5\r\n  let max_d = 50\r\n\r\n  // in\r\n  if (!figStore.cm){\r\n    const ratio = 2.54\r\n    min_d = Math.round(min_d/ratio)\r\n    max_d = Math.round(max_d/ratio)\r\n  }\r\n  \r\n  const slider_diameter = <Slider rootStyle={sliderStyle} domain={[min_d, max_d]} step={1} mode={2} values={[figStore.diameter]} onUpdate={(val) => figStore.update_diameter(val[0])} >\r\n    <Rail>\r\n      {({ getRailProps }) => (\r\n        <div style={railStyle} {...getRailProps()} />\r\n      )}\r\n    </Rail>\r\n    <Handles>\r\n      {({ handles, getHandleProps }) => (\r\n        <div className=\"slider-handles\">\r\n          {handles.map(handle => (\r\n            <Handle\r\n              key={handle.id}\r\n              handle={handle}\r\n              getHandleProps={getHandleProps}\r\n            />\r\n          ))}\r\n        </div>\r\n      )}\r\n    </Handles>\r\n  </Slider>\r\n  \r\n\r\n  const arms_switch = <div className=\"switch\"  style={{width: 100, height: 50}}>\r\n  <SwitchSelector\r\n      onChange={(val) => figStore.update_arms(val)}\r\n      options={options}\r\n      initialSelectedIndex={figStore.arms ? 0 : 1}\r\n      backgroundColor={\"#FFE7E5\"}\r\n      fontColor={\"#D75A58\"}\r\n      optionBorderRadius={30}\r\n  />\r\n  </div>\r\n\r\n  \r\nconst ears_switch = <div className=\"switch\"  style={{width: 360, height: 50}}>\r\n<SwitchSelector\r\n    onChange={(val) => figStore.update_ears(val)}\r\n    options={ears_options}\r\n    initialSelectedIndex={ears.indexOf(`${figStore.ears}`)}\r\n    backgroundColor={\"#FFE7E5\"}\r\n    fontColor={\"#D75A58\"}\r\n    optionBorderRadius={30}\r\n    fontSize={20}\r\n/>\r\n</div>\r\n  \r\n  const units_switch = <div className=\"switch\" style={{width: 100, height: 50}}>\r\n      <SwitchSelector\r\n          onChange={(val) => figStore.update_units(val)}\r\n          options={unitOptions}\r\n          initialSelectedIndex={figStore.cm ? 0 : 1}\r\n          backgroundColor={\"#FFE7E5\"}\r\n          fontColor={\"#D75A58\"}\r\n          optionBorderRadius={30}\r\n      />\r\n  </div>\r\n\r\nfunction nextPage(){\r\n  coloringFormStore.setMsg()\r\n  figStore.setSize()\r\n  const incremented_val = firebase.firestore.FieldValue.increment(1)\r\n  firestore.collection(\"diagrams_count\").doc(\"count\").update({count_value: incremented_val})\r\n}\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container\" style={{background: '#FFE7E5', display: 'flex', flexDirection:'row', width: 'auto', height: 'auto'}}>\r\n        <div className=\"containerLeft\" style={{background: '#FFE7E5', width: '57%', height: 'auto',float:'left'}}>\r\n          <Canvas camera={{position:[0, 0, 80], fov:30, aspect: 800/600, near: 0.1,far: 1000}} style={{background: \"pink\", height: '470px', borderRadius:30, marginTop:'1%', marginLeft:'1%',width:'99%'}}>\r\n            <spotLight position={[-275, 150, 90]} intensity = {1.5}/>\r\n            <spotLight position={[10, 25, 90]} intensity = {1.3}/>\r\n            <spotLight position={[-150, -150, 110]} intensity = {0.6} />\r\n            <spotLight position={[150, -150, 110]} intensity={0.6} />\r\n            <spotLight position={[-10, 0, 25]} intensity={0.6} />\r\n            <Figurine figStore={figStore} />\r\n          </Canvas>\r\n          <div className=\"containerCaption-fig\">\r\n            <div style={{height: 13}}/>\r\n            <a>Press <span>x</span> , <span>y</span> , and <span>z</span> to rotate the object ,<br/><span>q</span> and <span>w</span> to zoom in and out , <br/>and <span>space</span> to reset view to default . </a>\r\n            <div style={{height: 13}}/>\r\n          </div>\r\n        </div>\r\n        <div className=\"containerRight\" style={{width: '43%', height: '100%', overflow: 'visible', float:'right'}}>\r\n          <br />\r\n          <p className=\"textSwitch\">units</p>\r\n          {units_switch}\r\n          <br/>\r\n          <p className=\"text\">body diameter</p>\r\n          <div style={{width:'88%', marginLeft:'5%'}}>\r\n            {slider_diameter}\r\n          </div>\r\n          <br/>\r\n          <p className=\"text\">arms</p>\r\n          {arms_switch}\r\n          <br/>\r\n          <p className=\"text\">ears</p>\r\n          {ears_switch}\r\n          <div className=\"done-basket\" style={{width: 80, marginBottom:35}}>\r\n            <NavBtn>\r\n              <NavBtnLink style={{background: \"#D14240\"}} onClick={nextPage} to='/colouring'>\r\n                <p className = \"buttonText\">done</p>\r\n              </NavBtnLink>\r\n            </NavBtn>\r\n          </div>\r\n        </div>\r\n      </div>\r\n  </>  \r\n  );\r\n};\r\n\r\nexport default observer(CreateFigurine);","C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\pages\\result.js",["246","247"],"C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\models\\DrawingSectionModel.js",[],"C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\components\\Navbar\\index.js",["248","249","250"],"import React from 'react';\r\nimport {\r\n  Nav,\r\n  NavLink,\r\n  Bars,\r\n  NavMenu,\r\n  NavBtn,\r\n  NavBtnLink, \r\n  PlainLink\r\n} from './NavbarElements';\r\nimport logo from \"../../assets/complex-logo.png\"\r\n\r\nconst Navbar = () => {\r\n  return (\r\n    <>\r\n      <Nav>\r\n        <PlainLink to='/'><img style={{height: 60, margin: 20, float: 'left'}}src={logo} alt='logo' /></PlainLink>\r\n        <PlainLink to='/'>\r\n          <p style ={{letterSpacing: 3, marginRight: 100, color:\"white\", float: 'left'}}>3d-o</p>\r\n        </PlainLink>\r\n        {/* <Bars /> */}\r\n        <NavMenu>\r\n          <NavLink to='/about'>\r\n            <p style ={{letterSpacing: 2}}>about</p>\r\n          </NavLink>\r\n          <NavLink to='/learn' >\r\n            <p style ={{letterSpacing: 2}}>learn</p>\r\n          </NavLink>\r\n          <NavLink to='/create'>\r\n            <p style ={{letterSpacing: 2}}>create</p>\r\n          </NavLink>\r\n          <NavLink to='/browse'>\r\n            <p style ={{letterSpacing: 2}}>browse</p>\r\n          </NavLink>\r\n          <NavLink to='/gallery'>\r\n            <p style ={{letterSpacing: 2}}>gallery</p>\r\n          </NavLink>\r\n          <NavLink to='/contact'>\r\n            <p style ={{letterSpacing: 2}}>contact</p>\r\n          </NavLink>\r\n          <NavLink to='/login'>\r\n            <p style ={{letterSpacing: 2}}>login</p>\r\n          </NavLink>\r\n          {/* Second Nav */}\r\n          {/* <NavBtnLink to='/sign-in'>Sign In</NavBtnLink> */}\r\n        </NavMenu>\r\n        {/* <NavBtn>\r\n          <NavBtnLink to='/signin'>Sign In</NavBtnLink>\r\n        </NavBtn> */}\r\n      </Nav>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\components\\Static\\index.js",[],"C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\components\\DrawingSection\\index.js",["251"],"  \r\nimport React, { useRef} from \"react\";\r\nimport \"./drawingSection.css\";\r\nimport Row from \"../Row\";\r\nimport SpecialRow from \"../SpecialRow\";\r\nimport TriangleSection from \"../TriangleSection\";\r\nimport { observer } from \"mobx-react\";\r\n\r\n// import { exportComponentAsPNG } from \"react-component-export-image\";\r\n\r\nconst DrawingSection = (props) => {\r\n  const {caption, specialTop, specialBottom, formObject, DrawingSectionModel} = props;\r\n\r\n  const panelRef = useRef();\r\n\r\n  let rows = []; \r\n  let swanUpper = [];\r\n\r\n  if (formObject.model === \"swan\"){\r\n    if (formObject.swan_two_wings){\r\n      const wing_width = Math.round(0.4 * DrawingSectionModel.width)\r\n      const remainder = DrawingSectionModel.width - (2 * wing_width)\r\n      const chest_width = Math.ceil(remainder/2)\r\n      const back_width = Math.floor(remainder/2)\r\n      const wing1 = <TriangleSection key={0} wing={true} width={wing_width} formObject={formObject} elevation={DrawingSectionModel.height} firstRowDisplay={true}/> \r\n      const wing2 = <TriangleSection key={1} wing={true} width={wing_width} formObject={formObject} elevation={DrawingSectionModel.height} /> \r\n      const chest = <TriangleSection key={2} wing={true} width={chest_width} formObject={formObject} elevation={DrawingSectionModel.height} />\r\n      const back = <TriangleSection key={3} wing={true} width={back_width} formObject={formObject} elevation={DrawingSectionModel.height} inverted={true}/>\r\n      swanUpper.push(wing1, chest, wing2, back)\r\n    } \r\n    else {\r\n      const wing_width = Math.round(0.75 * DrawingSectionModel.width)\r\n      const remainder = DrawingSectionModel.width - wing_width\r\n      const chest_width = remainder - 2\r\n      const wing = <TriangleSection key={0} wing={true} width={wing_width} formObject={formObject} elevation={DrawingSectionModel.height} firstRowDisplay={true} inverted={true}/> \r\n      const chest = <TriangleSection key={1} wing={true} width={chest_width} formObject={formObject} elevation={DrawingSectionModel.height} firstRowDisplay={true} />\r\n      swanUpper.push(wing, chest)\r\n    }\r\n  }\r\n\r\n  if (formObject.model != \"swan\") rows.push(<SpecialRow key={-1} offset={0} width={DrawingSectionModel.width} specialTop={specialTop} />)\r\n  \r\n  if(DrawingSectionModel.drawingSectionData.length === 0){\r\n    for (let i = 0; i < DrawingSectionModel.height; i++){\r\n      DrawingSectionModel.addRow()\r\n    }\r\n  }\r\n  for (let i = 0; i < DrawingSectionModel.height; i++) {\r\n    DrawingSectionModel.drawingSectionData[i].setWidth(DrawingSectionModel.width)\r\n    DrawingSectionModel.drawingSectionData[i].setDisplayRowNum(DrawingSectionModel.height-i)\r\n    if (i%2 === 1){\r\n      DrawingSectionModel.drawingSectionData[i].setOffset()\r\n      rows.push(<Row key={i} formObject={formObject} RowModel={DrawingSectionModel.drawingSectionData[i]}/>);\r\n    }\r\n    else{ \r\n      rows.push(<Row key={i} formObject={formObject} RowModel={DrawingSectionModel.drawingSectionData[i]}/>);\r\n    }\r\n  }\r\n  \r\n  if(DrawingSectionModel.increasing){\r\n    if (DrawingSectionModel.height%2 === 1){\r\n      rows.push(<SpecialRow key={DrawingSectionModel.height} offset={10.5} width={DrawingSectionModel.width} specialBottom={specialBottom} />)\r\n    } else {\r\n      rows.push(<SpecialRow key={DrawingSectionModel.height} offset={10.5*2} width={DrawingSectionModel.width} specialBottom={specialBottom} />)\r\n    }\r\n  }\r\n  else{\r\n    if (DrawingSectionModel.height%2 === 1){\r\n      rows.push(<SpecialRow key={DrawingSectionModel.height} offset={0} width={DrawingSectionModel.width} specialBottom={specialBottom} />)\r\n    } else {\r\n      rows.push(<SpecialRow key={DrawingSectionModel.height} offset={10.5} width={DrawingSectionModel.width} specialBottom={specialBottom} />)\r\n    }\r\n  } \r\n\r\n  return (\r\n    <div id=\"drawingSection\" >\r\n      <div id=\"pixels\" ref={panelRef} style={{marginBottom: 10, marginLeft: 40, marginRight: 40}}>\r\n        {formObject.model === \"swan\" && <div style={{display:\"flex\", alignItems:\"flex-end\", marginLeft: 10.5, marginBottom: 3, justifyContent:\"flex-start\"}}>\r\n          {swanUpper}\r\n        </div>}\r\n        {caption && <p id=\"text\">{caption}</p>}\r\n        {rows}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default observer(DrawingSection)","C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\components\\Bottom\\index.js",["252","253"],"import React from \"react\";\r\nimport UntrackedOrigamiObject from \"../UntrackedOrigamiObject\";\r\nimport \"../DrawingSection/drawingSection.css\"\r\n\r\nfunction getDimensions(widths, heights) {\r\n    let curr_section = []\r\n    // getting from diameter to diameter in 'height' pieces\r\n    for (let i = 0; i < widths.length-1; i++){\r\n        const min_height = 3\r\n        let min_height_needed = min_height\r\n        let diff = widths[i+1]-widths[i]\r\n        let height_diff = heights[i+1] - heights[i]\r\n\r\n        let temp_dbottom = widths[i]\r\n        \r\n        // increasing\r\n        if (diff > 0){\r\n            curr_section.push([temp_dbottom,min_height])\r\n            while (diff > 0){\r\n                const add_to_this_row = Math.floor(temp_dbottom/min_height)\r\n                const actual_add = Math.min(diff, add_to_this_row)\r\n                diff -= actual_add \r\n                temp_dbottom += actual_add\r\n                if (diff == 0 && i < widths.length-2) break\r\n                min_height_needed += min_height\r\n                curr_section.unshift([temp_dbottom, min_height])\r\n            }\r\n        }\r\n        // decreasing\r\n        else if (diff < 0){\r\n            diff = diff * -1\r\n            curr_section.push([temp_dbottom,min_height])\r\n            while (diff > 0) {\r\n                const sub_from_this_row = Math.floor(temp_dbottom/4)\r\n                const actual_sub = Math.min(diff, sub_from_this_row)\r\n                diff -= actual_sub\r\n                temp_dbottom -= actual_sub\r\n                if (diff == 0 && i < widths.length-2) break\r\n                min_height_needed += min_height\r\n                curr_section.unshift([temp_dbottom,min_height])\r\n            }            \r\n        }\r\n        let excess_height = height_diff-min_height_needed\r\n        while (excess_height>0){\r\n            curr_section[excess_height%curr_section.length][1] += 1\r\n            excess_height -= 1\r\n        }\r\n    }\r\n    return curr_section\r\n}\r\n\r\nconst Bottom = (props) => {\r\n    const {flat, upsize, diameter, caption, formObject} = props \r\n    let object = <div></div>\r\n    let dimensions = []\r\n\r\n    function cmToPcs(cm, height=false){\r\n        const height_factor = upsize? 0.7: 0.55 // 0.5 cm height per row\r\n        const width_factor = upsize? 1.2 : 0.8 // 0.8 cm width per pc\r\n        if (height){\r\n            return Math.round(cm/height_factor)\r\n        }\r\n        return Math.round(cm/width_factor)\r\n    }\r\n\r\n    if (flat){\r\n        const rows = [[192,10],[160,8],[128,5],[96,5],[64,4],[48,4],[32,3],[16,3],[8,2],[4,2]] // backwards\r\n        let tot_height = Math.ceil(cmToPcs(diameter/2, true))\r\n        while (tot_height > 0){\r\n            const curr_row = rows.pop()\r\n            dimensions.unshift([curr_row[0], Math.min(tot_height,curr_row[1])])\r\n            tot_height -= curr_row[1]\r\n        } \r\n        object = <UntrackedOrigamiObject dimensions={dimensions} formObject={formObject} />\r\n    }\r\n    else{\r\n        // curved bottom/lid for basket\r\n        const widths = [4,cmToPcs(diameter * Math.PI)]\r\n        const heights = [0,Math.ceil(diameter/4)]\r\n        dimensions = getDimensions(widths, heights) // top to bottom \r\n        object = <UntrackedOrigamiObject dimensions={dimensions} formObject={formObject} />\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <p id=\"text\">{caption}</p>\r\n            {object}\r\n        </div>\r\n    )\r\n  }\r\n\r\nexport default Bottom;","C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\components\\ResultFigurine\\index.js",["254","255","256"],"import React, { useRef, useState, useMemo, useEffect} from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport * as THREE from \"three\";\r\n\r\nconst Figurine = (props) => {\r\n    const {figStore} = props\r\n    const itemsRef = useRef([]);\r\n    const insideRef = useRef([]);\r\n\r\n    useEffect(() => {\r\n        const len = figStore.modelDimensions.length-1\r\n        itemsRef.current = itemsRef.current.slice(0, len);\r\n        insideRef.current = insideRef.current.slice(0, len);\r\n        for(let i = 0; i < len; i += 1){\r\n            itemsRef.current[i].map = new THREE.TextureLoader().load(figStore.textures[i])\r\n            insideRef.current[i].map = new THREE.TextureLoader().load(figStore.textures[i])\r\n        }\r\n     }, []);\r\n\r\n    const texture_body = useMemo(() => new THREE.TextureLoader().load(figStore.textures[figStore.textures.length-1]), []) \r\n\r\n    let display_diameter = figStore.diameter\r\n    if (!figStore.cm){\r\n        display_diameter = Math.round(display_diameter * 2.54)\r\n    }\r\n\r\n    const theta_len = 0.8\r\n    const goal_rad = (display_diameter * figStore.body_scale)/2\r\n    const head_rad = goal_rad/Math.sin((1-theta_len) * Math.PI)\r\n    const offset = head_rad*Math.cos((1-theta_len) * Math.PI) - 0.2\r\n\r\n    const divs = figStore.getBrokenHeadPts(Math.PI*theta_len)\r\n\r\n    const broken_head = \r\n    <group>\r\n        {divs.map((_, i) => (\r\n            <mesh key={i} position={[0,(display_diameter * figStore.body_height) + offset,0]}>\r\n                <sphereGeometry args={[head_rad, 20, 14, 0, 2 * Math.PI, divs[i][0], divs[i][1]]}/>\r\n                <meshPhongMaterial ref={el => itemsRef.current[i] = el} side={THREE.FrontSide} specular=\"#121212\" shininess = {26}/>\r\n            </mesh>\r\n        ))}\r\n        {divs.map((_, i) => (\r\n            <mesh key={i} position={[0,(display_diameter * figStore.body_height) + offset,0]}>\r\n                <sphereGeometry args={[head_rad, 20, 14, 0, 2 * Math.PI, divs[i][0], divs[i][1]]}/>\r\n                <meshPhongMaterial ref={el => insideRef.current[i] = el} side={THREE.BackSide}/>\r\n            </mesh>\r\n        ))}\r\n    </group>\r\n    \r\n    let bunny_ears = <mesh/>\r\n    let cat_ears = <mesh/> \r\n    let sphere_ears = <mesh/>\r\n    let bear_ears = <mesh/>\r\n    let arms = <mesh/>\r\n\r\n    class CustomCircleCurve extends THREE.Curve {\r\n        constructor(scale) {\r\n          super();\r\n          this.scale = scale;\r\n        }\r\n        getPoint(t) {\r\n          const tx = Math.cos(2 * Math.PI * t);\r\n          const ty = Math.max(-0.5, Math.sin(2 * Math.PI * t));\r\n          const tz = 0;\r\n          return new THREE.Vector3(tx, ty, tz).multiplyScalar(this.scale);\r\n        }\r\n    }\r\n\r\n    if(figStore.ears === \"bear\"){\r\n        const tube_scale = head_rad/3\r\n        const path = new CustomCircleCurve(tube_scale)\r\n        const segs = 40\r\n        const tube_rad = Math.min(0.5, tube_scale/7)\r\n        const rad_segs = 7\r\n        const closed = false\r\n        const y_pos = (display_diameter * figStore.body_height) + offset + tube_scale/4 + (head_rad * Math.cos(Math.PI/4))\r\n\r\n        bear_ears =  \r\n        <group>\r\n        <mesh position={[-(head_rad * Math.cos(Math.PI/4) + tube_scale/5),y_pos,0]} rotation={[0,0,Math.PI/4]} >\r\n            <tubeGeometry args={[path, segs, tube_rad, rad_segs, closed]} />\r\n            <meshPhongMaterial color={figStore.default_color} side = {THREE.FrontSide} />\r\n        </mesh>\r\n        <mesh position={[(head_rad * Math.cos(Math.PI/4) + tube_scale/5),y_pos,0]} rotation={[0,0,-Math.PI/4]}>\r\n            <tubeGeometry args={[path, segs, tube_rad, rad_segs, closed]} />\r\n            <meshPhongMaterial  color={figStore.default_color} side = {THREE.FrontSide} />\r\n        </mesh>\r\n        </group>\r\n    }\r\n\r\n    if(figStore.ears === \"cat\"){\r\n        const shape = new THREE.Shape();\r\n        const y_pos = (display_diameter * figStore.body_height) + offset + (head_rad * Math.cos(Math.PI/4))\r\n        const half_side_len = (head_rad/1.5)/2\r\n        shape.moveTo(-half_side_len,0);\r\n        shape.quadraticCurveTo(-half_side_len/1.2, half_side_len * 1.3, 0,half_side_len * 1.8);\r\n        shape.quadraticCurveTo(half_side_len/1.2, half_side_len * 1.3, half_side_len,0);\r\n        shape.lineTo(-half_side_len,0);\r\n\r\n        const extrudeSettings = {\r\n            steps: 1,  \r\n            depth: 1,  \r\n            bevelEnabled: false,  \r\n          };\r\n\r\n        cat_ears = \r\n        <group>\r\n        <mesh position={[(head_rad * Math.cos(Math.PI/4) - half_side_len/3),y_pos,0]} rotation={[0,0,-Math.PI/4.5]}>\r\n            <extrudeGeometry args={[shape, extrudeSettings]}/>\r\n            <meshPhongMaterial  color={figStore.default_color} side={THREE.FrontSide} specular=\"#121212\" shininess = {26}/>        \r\n        </mesh>\r\n        <mesh position={[-(head_rad * Math.cos(Math.PI/4) - half_side_len/3),y_pos,0]} rotation={[0,0,Math.PI/4.5]}>\r\n            <extrudeGeometry args={[shape, extrudeSettings]}/>\r\n            <meshPhongMaterial  color={figStore.default_color} side={THREE.FrontSide} specular=\"#121212\" shininess = {26}/>        \r\n        </mesh>\r\n        </group>\r\n\r\n    }\r\n\r\n    if(figStore.ears === \"bunny\"){\r\n        const bshape = new THREE.Shape();\r\n        const y_pos = (display_diameter * figStore.body_height) + offset + (head_rad * Math.cos(Math.PI/4))\r\n        const half_side_len = (head_rad/2)/2\r\n        bshape.moveTo(-half_side_len,0);\r\n        bshape.lineTo(-half_side_len, half_side_len * 3)\r\n        bshape.quadraticCurveTo(-half_side_len/2, (half_side_len * 4), 0,half_side_len * 4);\r\n        bshape.quadraticCurveTo(half_side_len/2, half_side_len * 4, half_side_len, half_side_len * 3);\r\n        bshape.lineTo(half_side_len,0);\r\n\r\n        const extrudeSettings = {\r\n            steps: 1,  \r\n            depth: 1,  \r\n            bevelEnabled: false,  \r\n          };\r\n\r\n        bunny_ears = \r\n        <group>\r\n        <mesh position={[(head_rad * Math.cos(Math.PI/4) - half_side_len/3),y_pos,0]} rotation={[0,0,-Math.PI/4]}>\r\n            <extrudeGeometry args={[bshape, extrudeSettings]}/>\r\n            <meshPhongMaterial  color={figStore.default_color} side={THREE.FrontSide} specular=\"#121212\" shininess = {26}/>        \r\n        </mesh>\r\n        <mesh position={[-(head_rad * Math.cos(Math.PI/4) - half_side_len/3),y_pos,0]} rotation={[0,0,Math.PI/4]}>\r\n            <extrudeGeometry args={[bshape, extrudeSettings]}/>\r\n            <meshPhongMaterial  color={figStore.default_color} side={THREE.FrontSide} specular=\"#121212\" shininess = {26}/>        \r\n        </mesh>\r\n        </group>\r\n    }\r\n\r\n    if(figStore.ears === \"sphere\"){\r\n        const ear_rad = head_rad/3.5\r\n        const y_pos = (display_diameter * figStore.body_height) + offset + ear_rad + (head_rad * Math.cos(Math.PI/4))\r\n        sphere_ears = \r\n        <group>\r\n            <mesh position={[-(head_rad * Math.cos(Math.PI/4)),y_pos,0]} rotation={[0,0,Math.PI/4]}>\r\n                <sphereGeometry args={[ear_rad, 20, 14, 0, 2 * Math.PI, 0, Math.PI ]}/>\r\n                <meshPhongMaterial  color={figStore.default_color} side={THREE.FrontSide} specular=\"#121212\" shininess = {26}/>\r\n            </mesh>\r\n            <mesh position={[(head_rad * Math.cos(Math.PI/4)),y_pos,0]} rotation={[0,0,-Math.PI/4]}>\r\n                <sphereGeometry args={[ear_rad, 20, 14, 0, 2 * Math.PI, 0, Math.PI ]}/>\r\n                <meshPhongMaterial  color={figStore.default_color} side={THREE.FrontSide} specular=\"#121212\" shininess = {26}/>\r\n            </mesh>\r\n        </group>\r\n    }\r\n\r\n    if (figStore.arms){\r\n        const arm_rad = display_diameter/7\r\n        const y_pos = (display_diameter * figStore.body_height)/2\r\n        const x_pos = (display_diameter * figStore.body_scale)/2 + arm_rad*1.3\r\n        arms = \r\n        <group>\r\n            <mesh position={[-(x_pos),y_pos,0]} rotation={[0,0,Math.PI/2.65]}>\r\n                <cylinderGeometry args={[arm_rad, arm_rad, arm_rad*1.3, 15]} />\r\n                <meshPhongMaterial  color={figStore.default_color} side={THREE.FrontSide} specular=\"#121212\" shininess = {26}/>\r\n            </mesh>\r\n            <mesh position={[x_pos,y_pos,0]} rotation={[0,0,-Math.PI/2.65]}>\r\n                <cylinderGeometry args={[arm_rad, arm_rad, arm_rad*1.3, 15]} />\r\n                <meshPhongMaterial  color={figStore.default_color} side={THREE.FrontSide} specular=\"#121212\" shininess = {26}/>\r\n            </mesh>\r\n        </group>\r\n    }\r\n\r\n    const points = figStore.updateCurvedPts()\r\n\r\n    let [x_rot,changeXrot] = useState(0);\r\n    let [y_rot,changeYrot] = useState(0);\r\n    let [z_rot,changeZrot] = useState(0);\r\n    let [dist,changeDist] = useState(0);\r\n\r\n    const handleKeyDown = (event) => {\r\n        switch(event.key)\r\n        {\r\n            case \"x\":\r\n                    x_rot = x_rot + 0.1\r\n                    changeXrot(x_rot);\r\n                    break;\r\n            case \"y\": \r\n                    y_rot = y_rot + 0.1\r\n                    changeYrot(y_rot);\r\n                    break;\r\n            case \"z\": \r\n                    z_rot = z_rot + 0.1\r\n                    changeZrot(z_rot);\r\n                    break;\r\n            case \"w\": \r\n                    dist = Math.max(dist - 5,-300)\r\n                    changeDist(dist)\r\n                    break;\r\n            case \"q\": \r\n                    dist = Math.min(dist + 5,50)\r\n                    changeDist(dist)\r\n                    break;\r\n            case \" \": \r\n                    event.preventDefault()\r\n                    x_rot = 0\r\n                    y_rot = 0\r\n                    z_rot = 0 \r\n                    dist = 0\r\n                    changeXrot(x_rot)\r\n                    changeYrot(y_rot)\r\n                    changeZrot(z_rot)\r\n                    changeDist(dist)\r\n                    break;\r\n            default: \r\n                    break;\r\n        }\r\n    };\r\n    \r\n    React.useEffect(() => {\r\n        window.addEventListener('keydown', handleKeyDown);\r\n\r\n        // cleanup this component\r\n        return () => {\r\n            window.removeEventListener('keydown', handleKeyDown);\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <group position={[0,-7,dist]} rotation={[x_rot,y_rot,z_rot]}> \r\n            <mesh >\r\n                <latheGeometry args={[points, 30, 0, 2*Math.PI]}/>\r\n                <meshPhongMaterial map = {texture_body}  side={THREE.FrontSide} specular=\"#121212\" shininess = {26}/>\r\n            </mesh>\r\n            <mesh>\r\n                <latheGeometry args={[points, 30, 0, 2*Math.PI]}/>\r\n                <meshPhongMaterial map = {texture_body}  side = {THREE.BackSide} />\r\n            </mesh>\r\n            {broken_head}\r\n            {figStore.ears === \"bear\" && bear_ears}\r\n            {figStore.ears === \"bunny\" && bunny_ears}\r\n            {figStore.ears === \"cat\" && cat_ears}\r\n            {figStore.ears === \"sphere\" && sphere_ears}\r\n            {figStore.arms && arms}\r\n        </group>\r\n    )\r\n  }\r\n\r\nexport default observer(Figurine);",["257","258"],"C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\models\\PxModel.js",[],"C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\components\\SpecialRow\\index.js",["259","260","261","262"],"import React from \"react\";\r\nimport \"./specialRow.css\";\r\nimport SpecialPixel from \"../SpecialPixel\";\r\n\r\n// at least one of specialTop or specialBottom != null \r\n\r\nexport default function SpecialRow(props) {\r\n  const { width, offset, specialTop, specialBottom } = props;\r\n\r\n  let pixels = [];\r\n\r\n  const my_dict = specialBottom ? specialBottom : specialTop\r\n  let count = 0 \r\n\r\n  pixels.push(<SpecialPixel key={-1} on={false} num={\"\"}/>)\r\n\r\n  for (let i = 0; i < width; i++) {\r\n    if (i in my_dict){\r\n      if (my_dict[i] == 1){\r\n        count += 1\r\n        pixels.push(<SpecialPixel key={i} on={true} markerNum={count}/>);\r\n      }\r\n      else if (my_dict[i] == -1){\r\n        pixels.push(<SpecialPixel key={i} on={true} rounded={true}/>);\r\n      }\r\n      else if (i == width-1 && my_dict[i] == 0){\r\n        pixels[0] = <SpecialPixel key={i} on={true}/>\r\n      }\r\n      else{\r\n        pixels.push(<SpecialPixel key={i} on={true}/>);\r\n      }\r\n    }\r\n    else{\r\n        pixels.push(<SpecialPixel key={i} on={false} num = {i+1}/>);\r\n    }\r\n  }\r\n\r\n  return <div style={{marginLeft: offset}} className=\"specialRow\">{pixels}</div>;\r\n}","C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\components\\UntrackedRow\\index.js",["263"],"import React, {useEffect} from \"react\";\r\nimport \"../Row/row.css\";\r\nimport UntrackedPixel from \"../UntrackedPixel\";\r\nimport SpecialPixel from \"../SpecialPixel\";\r\nimport { observer } from \"mobx-react\";\r\n\r\n\r\nconst UntrackedRow = (props) => {\r\n  const {wing, formObject, numPx, offset, display, inverted} = props;\r\n  let pixels = [];\r\n\r\n  if(display) pixels.push(<SpecialPixel key={-1} on={false} displayRowNum={display}/>)\r\n\r\n  for (let i = 0; i < numPx; i++) {\r\n    pixels.push(<UntrackedPixel key={i} formObject={formObject} inverted={inverted} />);\r\n  }\r\n\r\n  if (!wing) pixels.push(<SpecialPixel key={numPx} on={false} displayRowNum={display} />)\r\n  \r\n  return <div style={{marginLeft: offset}} className=\"row\">{pixels}</div>;\r\n  \r\n}\r\n\r\nexport default observer(UntrackedRow)","C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\components\\Row\\index.js",["264","265"],"import React, {useEffect} from \"react\";\r\nimport \"./row.css\";\r\nimport Pixel from \"../Pixel\";\r\nimport SpecialPixel from \"../SpecialPixel\";\r\nimport { observer } from \"mobx-react\";\r\n\r\n\r\nconst Row = (props) => {\r\n  const {formObject, RowModel} = props;\r\n  let pixels = [];\r\n\r\n  pixels.push(<SpecialPixel key={-1} on={false} displayRowNum={RowModel.displayRowNum} />)\r\n\r\n  if (RowModel.rowData.length == 0){\r\n    for (let i = 0; i < RowModel.width; i++) {\r\n      RowModel.addPx()\r\n    }\r\n  }\r\n  for (let i = 0; i < RowModel.width; i++) {\r\n    if(formObject.inverted) RowModel.rowData[i].setInverted()\r\n    pixels.push(<Pixel key={i} formObject={formObject} PxModel={RowModel.rowData[i]}/>);\r\n  }\r\n\r\n  pixels.push(<SpecialPixel key={RowModel.width} on={false} displayRowNum={RowModel.displayRowNum} />)\r\n\r\n  return <div style={{marginLeft: RowModel.offset}} className=\"row\">{pixels}</div>;\r\n}\r\n\r\nexport default observer(Row)","C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\components\\Pixel\\index.js",["266","267"],"import React, { useEffect} from \"react\";\r\nimport \"./pixel.css\";\r\nimport { observer } from \"mobx-react\";\r\n\r\nconst Pixel = (props) => {\r\n  const {formObject, PxModel} = props;\r\n\r\n  function borderColor() {\r\n    var color = PxModel.pixelColor.substring(1, 8);\r\n    var r = parseInt(color.substring(0, 2), 16); // hexToR\r\n    var g = parseInt(color.substring(2, 4), 16); // hexToG\r\n    var b = parseInt(color.substring(4, 6), 16); // hexToB\r\n    return (((r * 0.299) + (g * 0.587) + (b * 0.114)) > 90) ?\r\n      \"#000000\" : \"#FFFFFF\";\r\n  }\r\n\r\n  useEffect(()=>{\r\n    formObject.addPc()\r\n    formObject.updateCounterDefault(true)\r\n  }, [])\r\n\r\n  useEffect(()=>{\r\n    if (formObject.clear){\r\n      formObject.updateCounterDefault(true)\r\n      PxModel.setPixelColor(formObject.defaultColor)\r\n    }\r\n    else if(PxModel.pixelColor === formObject.oldDefault) {\r\n      formObject.updateCounterDefault()\r\n      PxModel.setPixelColor(formObject.defaultColor)\r\n    }\r\n  }, [formObject.defaultColor])\r\n\r\n  function applyColor() {\r\n    formObject.unsetClear();\r\n    PxModel.setPixelColor(formObject.selectedColor);\r\n    if (PxModel.pixelColor !== PxModel.oldColor){\r\n      formObject.updateCounter(PxModel.oldColor, PxModel.pixelColor)\r\n      PxModel.setOldColor(PxModel.pixelColor)\r\n    } \r\n    PxModel.setCanChangeColor(false);\r\n  }\r\n\r\n  function applyColorSpray() {\r\n    if (formObject.mode){\r\n      applyColor()\r\n    }\r\n  }\r\n\r\n  function changeColorOnHover() {\r\n    PxModel.setOldColor(PxModel.pixelColor);\r\n    PxModel.setPixelColor(formObject.selectedColor);\r\n  }\r\n\r\n  function resetColor() {\r\n    if (PxModel.canChangeColor) {\r\n      PxModel.setPixelColor(PxModel.oldColor);\r\n    }\r\n\r\n    PxModel.setCanChangeColor(true);\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className=\"pixel\"\r\n      onClick={applyColor}\r\n      onMouseEnter={changeColorOnHover}\r\n      onMouseLeave={resetColor}\r\n      onMouseOver={applyColorSpray}\r\n      style={{ background: PxModel.pixelColor, borderColor: borderColor(), borderStyle: \"solid\"}}\r\n    >\r\n      {PxModel.inverted && <div className=\"inverted\" style={{color: borderColor()}}>-</div>}\r\n    </div>\r\n  );\r\n\r\n}\r\n\r\nexport default observer(Pixel);","C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\models\\FigurineStore.js",["268","269","270","271","272"],"import {types } from \"mobx-state-tree\";\r\nimport * as THREE from \"three\";\r\nimport React from \"react\"\r\n\r\nfunction getCurvePointsFigurine(_pts, tension, numOfSegments) {\r\n\r\n    var res = [],    // clone array\r\n        x, y,           // our x,y coords\r\n        t1x, t2x, t1y, t2y, // tension vectors\r\n        c1, c2, c3, c4,     // cardinal points\r\n        st, t, i;       // steps based on num. of segments\r\n\r\n    const first_x = _pts[0]\r\n    const first_y = _pts[1]\r\n    const last_x = _pts[4]\r\n    const last_y = _pts[5]\r\n\r\n    _pts.unshift(first_y)\r\n    _pts.unshift(first_x)\r\n    _pts.push(last_x)\r\n    _pts.push(last_y)\r\n\r\n    for (i=2; i < (_pts.length - 4); i+=2) {\r\n        for (t=0; t <= numOfSegments; t++) {\r\n\r\n            // calc tension vectors\r\n            t1x = (_pts[i+2] - _pts[i-2]) * tension;\r\n            t2x = (_pts[i+4] - _pts[i]) * tension;\r\n\r\n            t1y = (_pts[i+3] - _pts[i-1]) * tension;\r\n            t2y = (_pts[i+5] - _pts[i+1]) * tension;\r\n\r\n            // calc step\r\n            st = t / numOfSegments;\r\n\r\n            // calc cardinals\r\n            c1 =   2 * Math.pow(st, 3)  - 3 * Math.pow(st, 2) + 1; \r\n            c2 = -(2 * Math.pow(st, 3)) + 3 * Math.pow(st, 2); \r\n            c3 =       Math.pow(st, 3)  - 2 * Math.pow(st, 2) + st; \r\n            c4 =       Math.pow(st, 3)  -     Math.pow(st, 2);\r\n\r\n            // calc x and y cords with common control vectors\r\n            x = c1 * _pts[i]    + c2 * _pts[i+2] + c3 * t1x + c4 * t2x;\r\n            y = c1 * _pts[i+1]  + c2 * _pts[i+3] + c3 * t1y + c4 * t2y;\r\n\r\n            //store points in array\r\n            res.push(x);\r\n            res.push(Math.max(0.5, y));\r\n\r\n        }\r\n    }\r\n    return res;\r\n}\r\n\r\nconst FigurineStore = types\r\n  .model(\"Figurine\", {\r\n    maxWidth: 0,\r\n    cm: true,\r\n    diameter: 13,\r\n    arms: true, \r\n    ears: \"bear\", // bear, bunny, cat, sphere\r\n    body_scale: 0.7,\r\n    body_height: 0.35,\r\n    default_color: \"#FFFFFF\",\r\n    textures: types.optional(types.array(types.string), []), // first idx = top, last idx = bottom of vase\r\n    tot_rows_head: 0,\r\n    upsize: false, \r\n    modelDimensions: types.optional(types.array(types.array(types.number)), [[30,12],[40,11],[53,10],[40,10]]), // last = body\r\n    // unused, only for consistency: \r\n    flat_bottom: false, \r\n    top_rim: false, \r\n    bottom_rim: false, \r\n    lid: false, \r\n    top_handle: false, \r\n    side_handles: false, \r\n  })\r\n  .actions(self => ({\r\n    update_ears(val){\r\n        self.ears = val\r\n    },\r\n    update_arms(val){\r\n        self.arms = val\r\n    },\r\n    in_to_cm(){\r\n        const conv = 2.54\r\n        self.diameter = Math.round(self.diameter * conv)\r\n        self.cm = true\r\n    },\r\n    cm_to_in(){\r\n        const conv = 2.54\r\n        self.diameter = Math.round(self.diameter / conv)\r\n        self.cm = false\r\n    },\r\n    update_units(units){\r\n        if (self.cm == units) return \r\n        // changing from in to cm\r\n        if (self.cm == false && units == true){\r\n            self.in_to_cm()\r\n        }\r\n        // changing from cm to in\r\n        else{\r\n            self.cm_to_in()\r\n        }\r\n        self.cm = units\r\n    },\r\n    update_diameter(d){\r\n        self.diameter = d\r\n    }, \r\n    cmToPcs(cm, height=false){\r\n        const height_factor = self.upsize? 0.7: 0.55 // 0.5 cm height per row\r\n        const width_factor = self.upsize? 1.2 : 0.8 // 0.8 cm width per pc\r\n        if (height){\r\n            return Math.round(cm/height_factor)\r\n        }\r\n        return Math.round(cm/width_factor)\r\n    },\r\n    setSize(){\r\n        const conv = 2.54\r\n        const diameter_cm = self.cm ? self.diameter : self.diameter * conv\r\n        if (diameter_cm > 25){\r\n            self.upsize = true\r\n        }\r\n    },\r\n    getDimensions() {\r\n        // INPUTS \r\n        // diameter: 30,\r\n\r\n        // OUTPUTS\r\n        // modelDimensions: types.optional(types.array(types.array(types.number)), [[43, 10]]\r\n\r\n        // convert from in to cm first \r\n        let diameter = self.diameter * self.body_scale\r\n\r\n        if (!self.cm) {\r\n            const conv = 2.54\r\n            diameter = Math.round(self.diameter * self.body_scale * conv)\r\n        }\r\n\r\n        // body \r\n        const height_input = diameter\r\n        const circ_pcs = self.cmToPcs(Math.PI * diameter)\r\n        const height = self.cmToPcs(height_input, true)\r\n        const body_dimensions = [circ_pcs, height]\r\n\r\n        // head\r\n        const theta_len = 0.8\r\n        const head_start_theta_len = 0.85\r\n        const goal_rad = (diameter * self.body_scale)/2 // units: cm\r\n        const head_rad = goal_rad/Math.sin((1-theta_len) * Math.PI)\r\n        const head_circ = self.cmToPcs(Math.PI * head_rad * 2)\r\n        const head_start_rad = head_rad * Math.sin((1-head_start_theta_len) * Math.PI)\r\n        const head_start_circ = self.cmToPcs(Math.PI * head_start_rad * 2)\r\n\r\n        const widths = [head_start_circ, head_circ, Math.min(head_start_circ, 4)] // units: pcs, 4 is the absolute min\r\n        const heights = [0, self.cmToPcs(head_rad), self.cmToPcs(2*head_rad, true)]\r\n        let modelDimensions = self.getDimensionsHead(widths, heights) // call function here using this as input\r\n\r\n        // together \r\n        self.maxWidth = self.cmToPcs(head_rad)\r\n        modelDimensions.push(body_dimensions)\r\n        self.modelDimensions = modelDimensions\r\n        console.log(modelDimensions)\r\n        return modelDimensions\r\n    },\r\n    getDimensionsHead(widths, heights) {\r\n        // INPUTS (cm)\r\n        // dhead_start\r\n        // dhead\r\n        // dhead_end\r\n\r\n        // OUTPUTS\r\n        // modelDimensions: types.optional(types.array(types.array(types.number)), [[43, 10], [53, 10],[40,10],[28,9], [16,10], [24,5]]), // top to bottom\r\n\r\n        // max allowed decrease rate: -1 per 5 pcs\r\n        // max increase rate: +1 per 1 pc \r\n        // min 3 rows per section\r\n        self.tot_rows_head = 0\r\n        let modelDimensions = []\r\n        // getting from diameter to diameter in 'height' pieces\r\n\r\n        for (let i = 0; i < widths.length-1; i++){\r\n            const min_height = 3\r\n            let min_height_needed = min_height\r\n            let diff = widths[i+1]-widths[i]\r\n            let height_diff = heights[i+1] - heights[i]\r\n\r\n            let temp_dbottom = widths[i]\r\n            let curr_section = []\r\n            \r\n            // increasing\r\n            if (diff > 0){\r\n                curr_section.push([temp_dbottom,min_height])\r\n                while (diff > 0){\r\n                    const add_to_this_row = Math.floor(temp_dbottom/min_height)\r\n                    const actual_add = Math.min(diff, add_to_this_row)\r\n                    diff -= actual_add \r\n                    temp_dbottom += actual_add\r\n                    if (diff == 0 && i < widths.length-2) break\r\n                    min_height_needed += min_height\r\n                    curr_section.unshift([temp_dbottom, min_height])\r\n                }\r\n            }\r\n            // decreasing\r\n            else if (diff < 0){\r\n                diff = diff * -1\r\n                curr_section.push([temp_dbottom,min_height])\r\n                while (diff > 0) {\r\n                    const sub_from_this_row = Math.floor(temp_dbottom/4)\r\n                    const actual_sub = Math.min(diff, sub_from_this_row)\r\n                    diff -= actual_sub\r\n                    temp_dbottom -= actual_sub\r\n                    if (diff == 0 && i < widths.length-2) break\r\n                    min_height_needed += min_height\r\n                    curr_section.unshift([temp_dbottom,min_height])\r\n                }            \r\n            }\r\n            self.tot_rows_head += Math.max(height_diff, min_height_needed)\r\n            let excess_height = height_diff-min_height_needed\r\n            while (excess_height>0){\r\n                curr_section[excess_height%curr_section.length][1] += 1\r\n                excess_height -= 1\r\n            }\r\n            modelDimensions.unshift(curr_section)    \r\n        }\r\n\r\n        var modelDimensions_merged = [].concat.apply([], modelDimensions);\r\n\r\n        return modelDimensions_merged\r\n    },\r\n    storePic(picData){\r\n        self.textures.push(picData)\r\n    },\r\n    clearTextures(){\r\n        self.textures = []\r\n    },\r\n    setDefaultColor(color){\r\n        self.default_color = color\r\n    },\r\n    getBrokenHeadPts(tot_theta_len){\r\n        let theta_start = 0 \r\n        let theta_len = 0\r\n        let divisions = []\r\n        for (let i = 0; i < self.modelDimensions.length-1; i++){\r\n            const num_rows = self.modelDimensions[i][1]\r\n            const ratio = num_rows/self.tot_rows_head\r\n            console.log(tot_theta_len)\r\n            console.log(self.tot_rows_head)\r\n            theta_len = ratio * tot_theta_len\r\n            divisions.push([theta_start, theta_len])\r\n            theta_start += theta_len\r\n        }\r\n        console.log(divisions)\r\n        return divisions\r\n    },\r\n    updateCurvedPts(){\r\n        let display_diameter = self.diameter\r\n        if (!self.cm){\r\n            display_diameter = Math.round(display_diameter * 2.54)\r\n        }\r\n        const s_dtop_h = display_diameter * self.body_height\r\n        const s_dbottom_h = -1 * s_dtop_h\r\n\r\n        const s_dtop_bottom = display_diameter * self.body_scale\r\n\r\n        const s_diameter = display_diameter\r\n        const s_diameter_h = 0\r\n\r\n        var myPoints = [s_dbottom_h,s_dtop_bottom/2, s_diameter_h,s_diameter/2, s_dtop_h,s_dtop_bottom/2]; \r\n        var tension = 0.65\r\n        var numOfSegments = 10\r\n        let points = [];\r\n        const new_pts = getCurvePointsFigurine(myPoints, tension, numOfSegments)\r\n        for (let i=0; i<new_pts.length; i+=2){\r\n            const h = new_pts[i]\r\n            const r = new_pts[i+1]\r\n            points.push( new THREE.Vector2(r, h));\r\n        }\r\n        return points\r\n    },\r\n  }))\r\n  .views(self => ({\r\n  }));\r\n\r\nexport default FigurineStore;\r\n\r\nconst FigurineContext = React.createContext();\r\n\r\nexport const FigurineProvider = ({ children, store }) => {\r\n    return (\r\n      <FigurineContext.Provider value={store}>{children}</FigurineContext.Provider>\r\n    );\r\n  };\r\n\r\nexport const useFigurineStore = () => React.useContext(FigurineContext);\r\n\r\nexport const withFigurineStore = (Component) => (props) => {\r\n    return <Component {...props} store={useFigurineStore()} />;\r\n  };","C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\pages\\gallery.js",[],"C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\firebase.js",[],"C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\pages\\create.js",["273","274"],"import React, { useEffect } from \"react\";\r\nimport vase from \"../assets/vase.png\";\r\nimport basket from \"../assets/basket.png\";\r\nimport swan from \"../assets/swan.png\";\r\nimport fig from \"../assets/fig.PNG\";\r\nimport straw from \"../assets/strawberry-slider-big.png\";\r\nimport { PlainLink } from \"../components/Navbar/NavbarElements\";\r\nimport \"./create.css\";\r\nimport { useStores } from \"../models/RootStoreContext\";\r\n\r\nconst Create = () => {\r\n  useEffect(() => {\r\n    coloringFormStore.setMsg(true, \"error\");\r\n    coloringFormStore.clearColoringForm();\r\n  }, []);\r\n\r\n  const { coloringFormStore } = useStores();\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"holderTop\">\r\n        {/* <img src={straw} alt={\"\"} className =\"leftS\"/> */}\r\n        <p className=\"create-text\">🍓 ' . ` select a model ` . ' 🍓</p>\r\n        {/* <img src={straw} alt={\"\"} className =\"rightS\"/> */}\r\n      </div>\r\n      <div\r\n        style={{\r\n          flexDirection: \"row\",\r\n          height: \"auto\",\r\n        }}\r\n      >\r\n        <div className=\"holder\">\r\n          <PlainLink to=\"/create-figurine\">\r\n            <img alt={\"\"} src={fig} className=\"create-link\" />\r\n            <p className=\"create-text\">• figurine •</p>\r\n          </PlainLink>\r\n          <PlainLink to=\"/create-vase\">\r\n            <img alt={\"\"} src={vase} className=\"create-link\" />\r\n            <p className=\"create-text\">• vase •</p>\r\n          </PlainLink>\r\n          <PlainLink to=\"/create-basket\">\r\n            <img alt={\"\"} src={basket} className=\"create-link\" />\r\n            <p className=\"create-text\">• basket •</p>\r\n          </PlainLink>\r\n          <PlainLink to=\"/create-swan\">\r\n            <img alt={\"\"} src={swan} className=\"create-link\" />\r\n            <p className=\"create-text\">• swan •</p>\r\n          </PlainLink>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Create;\r\n","C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\components\\Appendages\\index.js",[],"C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\components\\Vase\\index.js",["275","276","277","278","279"],"import React, { useRef, useState, useMemo, useEffect} from \"react\";\r\nimport {useFrame} from \"react-three-fiber\";\r\nimport { observer } from \"mobx-react\";\r\nimport * as THREE from \"three\";\r\nimport grid from \"../../assets/paper.PNG\";\r\n// import temp from \"../../assets/tempp.png\";\r\n\r\nconst Vase = (props) => {\r\n    const {vase} = props\r\n    const texture = useMemo(() => new THREE.TextureLoader().load(grid), []);\r\n    // texture.wrapS = THREE.MirroredRepeatWrapping;\r\n    // texture.wrapT = THREE.MirroredRepeatWrapping;\r\n    // texture.repeat.set(2, 2.6);\r\n\r\n    const s_dtop_h = vase.scale_h/2\r\n    const s_dbottom_h = -1 * s_dtop_h\r\n    const scale_factor = vase.scale_h/vase.height\r\n\r\n    const s_dtop = Math.max(1,vase.dtop * scale_factor)\r\n    const s_dbottom = Math.max(1,vase.dbottom * scale_factor)\r\n\r\n    const s_d1 = Math.max(1, vase.d1 * scale_factor)\r\n    const s_d1_h = (vase.d1_h/100) * vase.scale_h - s_dtop_h\r\n\r\n    const s_d2 = Math.max(1, vase.d2 * scale_factor)\r\n    const s_d2_h = (vase.d2_h/100) * vase.scale_h - s_dtop_h\r\n\r\n    const s_d3 = Math.max(1,vase.d3 * scale_factor)\r\n    const s_d3_h = (vase.d3_h/100) * vase.scale_h - s_dtop_h\r\n\r\n    let top_rim_mesh = <mesh/>\r\n    let bottom_rim_mesh = <mesh />\r\n    let flat_bottom_mesh = <mesh />\r\n\r\n    function getInputMarker(rad, height){\r\n        return (\r\n            <mesh position = {[0,height,0]}>\r\n                <cylinderGeometry args={[rad, rad, 0.25, 40, 1, true,0, Math.PI * 2]}/>\r\n                <meshPhongMaterial color=\"red\" />\r\n            </mesh>\r\n        )\r\n    }\r\n\r\n    const dtop_marker = vase.top_rim ? getInputMarker((s_dtop/2) + 0.6, s_dtop_h) : getInputMarker((s_dtop/2) + 0.1, s_dtop_h) \r\n    const dbottom_marker = vase.bottom_rim ? getInputMarker((s_dbottom/2) + 0.6, s_dbottom_h) : getInputMarker((s_dbottom/2) + 0.1, s_dbottom_h)\r\n    const d1_marker = getInputMarker((s_d1/2) + 0.1, s_d1_h)\r\n    const d2_marker = getInputMarker((s_d2/2) + 0.1, s_d2_h)\r\n    const d3_marker = getInputMarker((s_d3/2) + 0.1, s_d3_h)\r\n\r\n    if (vase.top_rim){\r\n        top_rim_mesh = <mesh position = {[0,s_dtop_h+0.1,0]} rotation = {[1.57,0,0]}> \r\n        <torusGeometry args={[(s_dtop/2)+0.1,0.3,10,50]}/>\r\n        <meshPhongMaterial color=\"#FF7E98\" />\r\n        </mesh>\r\n    }\r\n    if (vase.bottom_rim){\r\n        bottom_rim_mesh = <mesh position = {[0,s_dbottom_h-0.1,0]} rotation = {[1.57,0,0]}> \r\n        <torusGeometry args={[(s_dbottom/2)+0.1, 0.3, 10, 50]}/>\r\n        <meshPhongMaterial color=\"#FF7E98\" />\r\n        </mesh>\r\n    }\r\n\r\n    const points = vase.updateCurvedPts()\r\n\r\n    let [x_rot,changeXrot] = useState(0);\r\n    let [y_rot,changeYrot] = useState(0);\r\n    let [z_rot,changeZrot] = useState(0);\r\n    let [dist,changeDist] = useState(0);\r\n\r\n    if (vase.flat_bottom){\r\n        flat_bottom_mesh = <mesh position = {[0,s_dbottom_h,0]}>\r\n            <cylinderGeometry args={[s_dbottom/2, s_dbottom/2, 0.8, 32]}/>\r\n            <meshPhongMaterial  map={texture} />\r\n        </mesh>\r\n    }\r\n\r\n    const handleKeyDown = (event) => {\r\n        switch(event.key)\r\n        {\r\n            case \"x\":\r\n                    x_rot = x_rot + 0.1\r\n                    changeXrot(x_rot);\r\n                    break;\r\n            case \"y\": \r\n                    y_rot = y_rot + 0.1\r\n                    changeYrot(y_rot);\r\n                    break;\r\n            case \"z\": \r\n                    z_rot = z_rot + 0.1\r\n                    changeZrot(z_rot);\r\n                    break;\r\n            case \"w\": \r\n                    dist = Math.max(dist - 5,-550)\r\n                    changeDist(dist)\r\n                    break;\r\n            case \"q\": \r\n                    dist = Math.min(dist + 5,40)\r\n                    changeDist(dist)\r\n                    break;\r\n            case \" \": \r\n                    event.preventDefault()\r\n                    x_rot = 0\r\n                    y_rot = 0\r\n                    z_rot = 0 \r\n                    dist = 0\r\n                    changeXrot(x_rot)\r\n                    changeYrot(y_rot)\r\n                    changeZrot(z_rot)\r\n                    changeDist(dist)\r\n            default: \r\n                    break;\r\n        }\r\n    };\r\n    \r\n    React.useEffect(() => {\r\n        window.addEventListener('keydown', handleKeyDown);\r\n\r\n        // cleanup this component\r\n        return () => {\r\n            window.removeEventListener('keydown', handleKeyDown);\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <group position={[0,0,dist]} rotation={[x_rot,y_rot,z_rot]}> \r\n            <mesh >\r\n                <latheGeometry args={[points, 30, 0, 2*Math.PI]}/>\r\n                <meshPhongMaterial map = {texture}  side={THREE.FrontSide} specular=\"#121212\" shininess = {26}/>\r\n            </mesh>\r\n            <mesh>\r\n                <latheGeometry args={[points, 30, 0, 2*Math.PI]}/>\r\n                <meshPhongMaterial map = {texture}  side = {THREE.BackSide} />\r\n            </mesh>\r\n            {vase.top_rim && top_rim_mesh}\r\n            {vase.bottom_rim && bottom_rim_mesh}\r\n            {vase.flat_bottom && flat_bottom_mesh}\r\n            {dbottom_marker}\r\n            {d1_marker}\r\n            {d2_marker}\r\n            {d3_marker}\r\n            {dtop_marker}\r\n        </group>\r\n    )\r\n  }\r\n\r\nexport default observer(Vase);","C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\components\\BunnyOrHandle\\index.js",["280"],"import React from \"react\";\r\nimport UntrackedDrawingSection from \"../UntrackedDrawingSection\";\r\nimport \"../DrawingSection/drawingSection.css\"\r\n\r\nconst BunnyOrHandle = (props) => {\r\n    const {caption, size, formObject, upsize} = props;\r\n    let object = <div></div>\r\n    let height = 0\r\n    const lim = 50\r\n\r\n    function cmToPcs(cm, height=false){\r\n      const height_factor = upsize? 0.7: 0.55 // 0.5 cm height per row\r\n      const width_factor = upsize? 1.2 : 0.8 // 0.8 cm width per pc\r\n      if (height){\r\n          return Math.round(cm/height_factor)\r\n      }\r\n      return Math.round(cm/width_factor)\r\n    }\r\n\r\n    if (caption == \"bunny ear\"){\r\n        // height has to be odd number to have the base bigger\r\n        object = <UntrackedDrawingSection bunny={true} open={true} specialTop={[]} specialBottom={[]} formObject={formObject} dimensions={[size,(2*size)+1]} />\r\n    }\r\n    else {\r\n        height = cmToPcs(1.2 * size * Math.PI/2, true) // length of the handle = a bit more than hemisphere\r\n        const input_height = Math.min(height, lim)\r\n        const width = cmToPcs((38/360) * size * Math.PI)\r\n        object = <UntrackedDrawingSection open={true} specialTop={[]} specialBottom={[]} formObject={formObject} dimensions={[width,input_height]} />\r\n    }\r\n\r\n    return (    \r\n      <div>\r\n        <p id=\"text\">{caption}</p>\r\n        {object}\r\n        {height > lim && <p id=\"text\">+ {height-lim} more rows ...</p>}\r\n      </div>\r\n    )\r\n  }\r\n\r\nexport default BunnyOrHandle;","C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\components\\Basket\\index.js",["281","282","283","284"],"import React, { useRef, useState, useMemo, useEffect} from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport * as THREE from \"three\";\r\nimport grid from \"../../assets/paper.PNG\";\r\n\r\nconst Basket = (props) => {\r\n    const {basketStore} = props\r\n    const texture = useMemo(() => new THREE.TextureLoader().load(grid), []);\r\n\r\n    const s_dtop_h = basketStore.scale_h/2\r\n    const s_dbottom_h = -1 * s_dtop_h\r\n    const scale_factor = basketStore.scale_h/basketStore.height\r\n\r\n    const s_dtop = Math.max(1,basketStore.dtop * scale_factor)\r\n    const s_dbottom = Math.max(1,basketStore.dbottom * scale_factor)\r\n\r\n    const s_diameter = Math.max(1, basketStore.diameter * scale_factor)\r\n    const s_diameter_h = 0\r\n\r\n    // need rounded bottom shape , concave\r\n\r\n    let top_rim_mesh = <mesh/>\r\n    let bottom_rim_mesh = <mesh />\r\n    let handle = <mesh /> // handle options: 1 top, 2 sides, none \r\n    let lid = <mesh/> // true false\r\n    let side_handles = <mesh/>\r\n    let flat_bottom_mesh = <mesh />\r\n    let curved_bottom = <mesh />\r\n\r\n    if (basketStore.top_rim){\r\n        top_rim_mesh = <mesh position = {[0,s_dtop_h+0.1,0]} rotation = {[1.57,0,0]}> \r\n        <torusGeometry args={[(s_dtop/2)+0.15,0.25,10,50]}/>\r\n        <meshPhongMaterial color=\"#FF7E98\" />\r\n        </mesh>\r\n    }\r\n    if (basketStore.bottom_rim){\r\n        bottom_rim_mesh = <mesh position = {[0,s_dbottom_h-0.1,0]} rotation = {[1.57,0,0]}> \r\n        <torusGeometry args={[(s_dbottom/2)+0.15, 0.25, 10, 50]}/>\r\n        <meshPhongMaterial color=\"#FF7E98\" />\r\n        </mesh>\r\n    }\r\n\r\n    if (basketStore.top_handle){\r\n        const phi_len = Math.PI * 1\r\n        const theta_len = 0.1 * Math.PI\r\n        const theta_start = Math.PI * 0.45\r\n\r\n        handle = \r\n        <group>\r\n            <mesh position={[0,s_dtop_h,0]} rotation={[-Math.PI/2,0,0]}>\r\n                <sphereGeometry args={[s_dtop/2, 20, 10, 0, phi_len, theta_start, theta_len]} />\r\n                <meshPhongMaterial map = {texture}  side = {THREE.FrontSide} />\r\n            </mesh>\r\n            <mesh position={[0,s_dtop_h,0]}  rotation={[-Math.PI/2,0,0]}>\r\n                <sphereGeometry args={[s_dtop/2, 20, 10, 0, phi_len, theta_start, theta_len]} />\r\n                <meshPhongMaterial map = {texture}  side = {THREE.BackSide} />\r\n            </mesh>\r\n        </group>\r\n    }\r\n\r\n    if (basketStore.flat_bottom){\r\n        flat_bottom_mesh = <mesh position = {[0,s_dbottom_h,0]}>\r\n            <cylinderGeometry args={[s_dbottom/2, s_dbottom/2, 0.8, 32]}/>\r\n            <meshPhongMaterial  map={texture} />\r\n        </mesh>\r\n    }\r\n\r\n    class CustomCircleCurve extends THREE.Curve {\r\n        constructor(scale) {\r\n          super();\r\n          this.scale = scale;\r\n        }\r\n        getPoint(t) {\r\n          const tx = 0;\r\n          const ty = Math.max(-0.5, Math.sin(2 * Math.PI * t));\r\n          const tz = Math.cos(2 * Math.PI * t);\r\n          return new THREE.Vector3(tx, ty, tz).multiplyScalar(this.scale);\r\n        }\r\n      }\r\n\r\n    if (basketStore.side_handles){\r\n        const tube_scale = s_dtop/5\r\n        const path = new CustomCircleCurve(tube_scale)\r\n        const segs = 40\r\n        const tube_rad = Math.min(0.5, tube_scale/10)\r\n        const rad_segs = 7\r\n        const closed = false\r\n\r\n        side_handles =  \r\n        <group>\r\n        <mesh position={[(-s_dtop/2)+(tube_rad*2), s_dtop_h + tube_rad + (0.5*tube_scale), 0]} >\r\n            <tubeGeometry args={[path, segs, tube_rad, rad_segs, closed]} />\r\n            <meshPhongMaterial map = {texture}  side = {THREE.FrontSide} />\r\n        </mesh>\r\n        <mesh position={[(s_dtop/2)-(tube_rad*2), s_dtop_h + tube_rad + (0.5*tube_scale), 0]}>\r\n            <tubeGeometry args={[path, segs, tube_rad, rad_segs, closed]} />\r\n            <meshPhongMaterial map = {texture}  side = {THREE.FrontSide} />\r\n        </mesh>\r\n        </group>\r\n    }\r\n\r\n    if (basketStore.lid){\r\n        const lid_scale = 1\r\n        const percent_lid = 0.25\r\n        const rad_lid = (s_dtop * lid_scale/2) / Math.sin(Math.PI * percent_lid)\r\n        const lid_dist = s_dtop_h - (s_dtop* lid_scale/2) / Math.tan(Math.PI * percent_lid)\r\n        const deco_r = rad_lid/15\r\n        const deco_dist = lid_dist + rad_lid + deco_r - 0.2\r\n\r\n        lid = \r\n        <group>\r\n            <mesh position={[0,lid_dist+0.1,0]}>\r\n                <sphereGeometry args={[rad_lid, 20, 10, 0, Math.PI * 2, 0, Math.PI * percent_lid]} />\r\n                <meshPhongMaterial map = {texture}  side = {THREE.FrontSide} />\r\n            </mesh>\r\n            <mesh position={[0,lid_dist,0]}>\r\n                <sphereGeometry args={[rad_lid, 20, 10, 0, Math.PI * 2, 0, Math.PI * percent_lid]} />\r\n                <meshPhongMaterial map = {texture}  side = {THREE.BackSide} />\r\n            </mesh>\r\n            <mesh position={[0,deco_dist,0]}>\r\n                <sphereGeometry args={[deco_r, 20, 10]} />\r\n                <meshPhongMaterial map = {texture}  side = {THREE.FrontSide} />\r\n            </mesh>\r\n        </group>\r\n    }\r\n\r\n    if (!basketStore.flat_bottom){\r\n        const percent_sphere = 0.2\r\n        const rad_bottom = (s_dbottom/2) / Math.sin(Math.PI * percent_sphere)\r\n        const bottom_dist = s_dbottom_h - (s_dbottom/2) / Math.tan(Math.PI * percent_sphere)\r\n\r\n        curved_bottom = <group>\r\n        <mesh position={[0,bottom_dist-0.1,0]}>\r\n            <sphereGeometry args={[rad_bottom, 20, 10, 0, Math.PI * 2, 0, Math.PI * percent_sphere]} />\r\n            <meshPhongMaterial map = {texture}  side={THREE.FrontSide}/>\r\n        </mesh>\r\n        <mesh position={[0,bottom_dist-0.1,0]}>\r\n            <sphereGeometry args={[rad_bottom, 20, 10, 0, Math.PI * 2, 0, Math.PI * percent_sphere]} />\r\n            <meshPhongMaterial map = {texture}  side = {THREE.BackSide} />\r\n        </mesh>\r\n        </group>\r\n    }\r\n    \r\n    function getInputMarker(rad, height){\r\n        return (\r\n            <mesh position = {[0,height,0]}>\r\n                <cylinderGeometry args={[rad, rad, 0.25, 40, 1, true,0, Math.PI * 2]}/>\r\n                <meshPhongMaterial color=\"red\" />\r\n            </mesh>\r\n        )\r\n    }\r\n\r\n    const dtop_marker = basketStore.top_rim ? getInputMarker((s_dtop/2) + 0.5, s_dtop_h) : getInputMarker((s_dtop/2) + 0.1, s_dtop_h) \r\n    const dbottom_marker = basketStore.bottom_rim ? getInputMarker((s_dbottom/2) + 0.5, s_dbottom_h) : getInputMarker((s_dbottom/2) + 0.1, s_dbottom_h)\r\n    const diameter_marker = getInputMarker((s_diameter/2) + 0.1, s_diameter_h)\r\n\r\n    const points = basketStore.updateCurvedPts()\r\n\r\n    let [x_rot,changeXrot] = useState(0);\r\n    let [y_rot,changeYrot] = useState(0);\r\n    let [z_rot,changeZrot] = useState(0);\r\n    let [dist,changeDist] = useState(0);\r\n\r\n    const handleKeyDown = (event) => {\r\n        switch(event.key)\r\n        {\r\n            case \"x\":\r\n                    x_rot = x_rot + 0.1\r\n                    changeXrot(x_rot);\r\n                    break;\r\n            case \"y\": \r\n                    y_rot = y_rot + 0.1\r\n                    changeYrot(y_rot);\r\n                    break;\r\n            case \"z\": \r\n                    z_rot = z_rot + 0.1\r\n                    changeZrot(z_rot);\r\n                    break;\r\n            case \"w\": \r\n                    dist = Math.max(dist - 5,-300)\r\n                    changeDist(dist)\r\n                    break;\r\n            case \"q\": \r\n                    dist = Math.min(dist + 5,50)\r\n                    changeDist(dist)\r\n                    break;\r\n            case \" \": \r\n                    event.preventDefault()\r\n                    x_rot = 0\r\n                    y_rot = 0\r\n                    z_rot = 0 \r\n                    dist = 0\r\n                    changeXrot(x_rot)\r\n                    changeYrot(y_rot)\r\n                    changeZrot(z_rot)\r\n                    changeDist(dist)\r\n            default: \r\n                    break;\r\n        }\r\n    };\r\n    \r\n    React.useEffect(() => {\r\n        window.addEventListener('keydown', handleKeyDown);\r\n\r\n        // cleanup this component\r\n        return () => {\r\n            window.removeEventListener('keydown', handleKeyDown);\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <group position={[0,-5,dist]} rotation={[x_rot,y_rot,z_rot]}> \r\n            <mesh >\r\n                <latheGeometry args={[points, 30, 0, 2*Math.PI]}/>\r\n                <meshPhongMaterial map = {texture}  side={THREE.FrontSide} specular=\"#121212\" shininess = {26}/>\r\n            </mesh>\r\n            <mesh>\r\n                <latheGeometry args={[points, 30, 0, 2*Math.PI]}/>\r\n                <meshPhongMaterial map = {texture}  side = {THREE.BackSide} />\r\n            </mesh>\r\n            {basketStore.lid && lid}\r\n            {basketStore.top_rim && top_rim_mesh}\r\n            {basketStore.bottom_rim && bottom_rim_mesh}\r\n            {diameter_marker}\r\n            {dtop_marker}\r\n            {dbottom_marker}\r\n            {basketStore.top_handle && handle}\r\n            {basketStore.side_handles && side_handles}\r\n            {basketStore.flat_bottom && flat_bottom_mesh}\r\n            {!basketStore.flat_bottom && curved_bottom}\r\n        </group>\r\n    )\r\n  }\r\n\r\nexport default observer(Basket);","C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\components\\UntrackedOrigamiObject\\index.js",["285","286"],"C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\components\\UntrackedPixel\\index.js",["287","288","289","290","291"],"import React, { useEffect, useState, useRef} from \"react\";\r\nimport \"../Pixel/pixel.css\";\r\nimport { observer } from \"mobx-react\";\r\n\r\nconst UntrackedPixel = (props) => {\r\n  const {formObject, inverted} = props;\r\n\r\n  const [pixelColor, setPixelColor] = useState(formObject.defaultColor);\r\n  const [oldColor, setOldColor] = useState(pixelColor);\r\n  const [canChangeColor, setCanChangeColor] = useState(true);\r\n\r\n  function borderColor() {\r\n    var color = pixelColor.substring(1, 8);\r\n    var r = parseInt(color.substring(0, 2), 16); // hexToR\r\n    var g = parseInt(color.substring(2, 4), 16); // hexToG\r\n    var b = parseInt(color.substring(4, 6), 16); // hexToB\r\n    return (((r * 0.299) + (g * 0.587) + (b * 0.114)) > 90) ?\r\n      \"#000000\" : \"#FFFFFF\";\r\n  }\r\n\r\n  useEffect(()=>{\r\n    formObject.addPc()\r\n    formObject.updateCounterDefault(true)\r\n  }, [])\r\n  \r\n  useEffect(()=>{\r\n    if (formObject.clear){\r\n      formObject.updateCounterDefault(true, true)\r\n      setPixelColor(formObject.defaultColor)\r\n    }\r\n    else if(pixelColor == formObject.oldDefault) {\r\n      formObject.updateCounterDefault()\r\n      setPixelColor(formObject.defaultColor)\r\n    }\r\n  }, [formObject.defaultColor])\r\n\r\n\r\n  function applyColor() {\r\n    formObject.unsetClear();\r\n    setPixelColor(formObject.selectedColor);\r\n    if (pixelColor != oldColor){\r\n      formObject.updateCounter(oldColor, pixelColor)\r\n      setOldColor(pixelColor)\r\n    }\r\n    setCanChangeColor(false);\r\n  }\r\n\r\n  function applyColorSpray() {\r\n    if (formObject.mode){\r\n      applyColor()\r\n    }\r\n  }\r\n\r\n  function changeColorOnHover() {\r\n    setOldColor(pixelColor);\r\n    setPixelColor(formObject.selectedColor);\r\n  }\r\n\r\n  function resetColor() {\r\n    if (canChangeColor) {\r\n      setPixelColor(oldColor);\r\n    }\r\n\r\n    setCanChangeColor(true);\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className=\"pixel\"\r\n      onClick={applyColor}\r\n      onMouseEnter={changeColorOnHover}\r\n      onMouseLeave={resetColor}\r\n      onMouseOver={applyColorSpray}\r\n      style={{ background: pixelColor, width: 20, borderColor: borderColor(), borderStyle: \"solid\"}}\r\n    >\r\n      {inverted && <div className=\"inverted\" style={{color: borderColor()}}>-</div>}\r\n    </div>\r\n  );\r\n\r\n}\r\n\r\nexport default observer(UntrackedPixel);","C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\pages\\learn.js",["292","293","294","295","296","297"],"import React from \"react\";\r\nimport models from \"../assets/models.jpg\";\r\nimport sliders from \"../assets/sliders.PNG\";\r\nimport coloring from \"../assets/coloring.PNG\";\r\nimport downloadbutton from \"../assets/downloadbutton.PNG\";\r\nimport {\r\n  Heading,\r\n  Paragraph,\r\n  Bullet,\r\n  NumberBullet,\r\n  SideBySide,\r\n} from \"../components/Static\";\r\n\r\nconst Learn = () => {\r\n  return (\r\n    <div className=\"landing-container\">\r\n      <Heading text={\"learn 3d-origami\"} left={false} right_align={false} />\r\n      <NumberBullet num={false} left={false} text={\"the unit piece\"} />\r\n      <Paragraph\r\n        bottom={true}\r\n        left={false}\r\n        text={\"3d-origami begins with the unit piece.\"}\r\n      />\r\n      <NumberBullet left={true} num={false} text=\"sizing\" />\r\n      <Paragraph\r\n        bottom={true}\r\n        left={true}\r\n        text={\r\n          \"3d-origami pieces usually come in two different sizes: 1/32 and 1/16. These fractions indicate how many pieces can be cut from an 8.5 x 11 inch piece of US letter paper (A4 paper works too!). If you are using a different size of paper, cut the larger paper into 8.5 x 11 inch pieces before starting. \"\r\n        }\r\n      />\r\n      <NumberBullet left={false} num={false} text=\"paper\" />\r\n      <Paragraph\r\n        bottom={true}\r\n        left={false}\r\n        text={\r\n          \"Because not all colors come in standard letter paper or A4 sizes, sometimes other types of paper need to be used. Cardstock, poster board, or other thicker papers can be used as well, but I recommend making pieces the length when using these papers. In other words, skip the first step of folding your piece in half when folding and start directly at Step 3 in the diagram above! \"\r\n        }\r\n      />\r\n      <NumberBullet left={true} num={false} text=\"inversion\" />\r\n      <Paragraph\r\n        bottom={true}\r\n        left={true}\r\n        text={\r\n          \"Inversion is when the inside of the 3d-origami piece is facing outwards instead of inwards. Inversion is commonly used when building vases, baskets, and one-winged swans. Inverted pieces can be used to add interest and detailing to a project or to make the project more structurally sound. As a rule of thumb, 3d-o recommends using inverted pieces when your vase or basket is decreasing in circumference starting from the bottom. This is reflected in 3d-o's diagrams!\"\r\n        }\r\n      />\r\n      <NumberBullet left={false} num={false} text=\"increasing\" />\r\n      <Paragraph\r\n        bottom={true}\r\n        left={false}\r\n        text={\r\n          \"Increasing is the technique of adding more pieces to a row to increase the circumference. In increasing, 2 pieces in one row become 3 pieces in the next row. This is achieved by putting two unit pieces where you would normally put one. Pretend there is an invisible piece between the two pieces involved in the increasing. Optionally, you can also add a small piece between the two pieces in place of the invisible piece! \"\r\n        }\r\n      />\r\n      <NumberBullet left={true} num={false} text=\"decreasing\" />\r\n      <Paragraph\r\n        bottom={true}\r\n        left={true}\r\n        text={\r\n          \"Decreasing is the technique of removing pieces from a row to decrease the circumference. Decreasing slowly and properly makes structures stronger as curved surfaces are stronger than straight ones. In decreasing, 3 pieces become 2 pieces in the next row. This is achieved by putting two pieces where you would normally put three. In decreasing, two ''spikes'' go into one pocket.\"\r\n        }\r\n      />\r\n      <NumberBullet left={false} num={false} text=\"filling \" />\r\n      <Paragraph\r\n        bottom={true}\r\n        left={false}\r\n        text={\r\n          \"When a particular colour of paper is hard to find, filling can be really useful. Filling is the technique of using scrap paper to ''fill'' your unit piece. Filling can be used when your paper is ripped or when you want to save paper by cutting pieces much smaller than usual.Filling gives your piece the same strength as a normal, perfect piece, and uses less of your precious coloured paper. Filling can be cut from any scrap paper, such as old newspaper or magazines. Also, make the filling length a bit smaller than half of your piece length so it stays hidden!\"\r\n        }\r\n      />\r\n      <NumberBullet left={true} num={false} text=\"shaping\" />\r\n      <Paragraph\r\n        bottom={true}\r\n        left={true}\r\n        text={\r\n          \"While 3d-o diagrams will give you your desired shape, you can mold your structure to perfection and guide its progress with your hands and fingers as you build as well. \"\r\n        }\r\n      />\r\n      <div className=\"bottom-padding\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Learn;\r\n","C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\pages\\about.js",[],"C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\models\\VaseStore.js",["298","299","300","301","302","303","304","305","306","307","308","309","310"],"C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\pages\\login.js",[],"C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\pages\\create-basket.js",["311","312"],"import React, {useEffect} from \"react\";\r\nimport {\r\n  NavBtn,\r\n  NavBtnLink\r\n} from '../components/Navbar/NavbarElements';\r\nimport { Canvas} from \"react-three-fiber\";\r\nimport Basket from \"../components/Basket\"\r\nimport './create-vase.css'\r\nimport { Slider, Rail, Handles} from \"react-compound-slider\";\r\nimport SwitchSelector from \"react-switch-selector\";\r\nimport { observer } from \"mobx-react\";\r\nimport { useStores } from \"../models/RootStoreContext\"\r\nimport firebase from 'firebase/app'\r\nimport { firestore } from \"../firebase\"\r\n\r\nconst CreateBasket = () => {\r\n\r\n  const { basketStore, coloringFormStore} = useStores();\r\n\r\n  useEffect(() => {\r\n    coloringFormStore.setMsg(true, \"error\")\r\n    coloringFormStore.clearColoringForm()\r\n    coloringFormStore.setModel(\"basket\")\r\n  }, [])\r\n\r\n  const options = [\r\n    {\r\n        label: \"y\",\r\n        value: true,\r\n        selectedBackgroundColor: \"#E28988\",\r\n    },  {\r\n        label: \"n\",\r\n        value: false,\r\n        selectedBackgroundColor: \"#E28988\"\r\n    }\r\n  ];\r\n  \r\n  const unitOptions = [\r\n    {\r\n        label: \"cm\",\r\n        value: true,\r\n        selectedBackgroundColor: \"#E28988\",\r\n    },  {\r\n        label: \"in\",\r\n        value: false,\r\n        selectedBackgroundColor: \"#E28988\"\r\n    }\r\n  ];\r\n\r\n  const sliderStyle = {  // Give the slider some width\r\n    position: 'relative',\r\n    width: '100%',\r\n    height: 15,\r\n    // border: '1px solid steelblue',\r\n  }\r\n  \r\n  const railStyle = {\r\n    position: 'absolute',\r\n    width: '100%',\r\n    height: 9,\r\n    // marginTop: 35,\r\n    borderRadius: 5,\r\n    backgroundColor: 'pink',\r\n  }\r\n  \r\n  function Handle({\r\n    handle: { id, value, percent },\r\n    getHandleProps\r\n  }) {\r\n    return (\r\n      <div className = \"straw\"\r\n        style={{\r\n          left: `${percent}%`,\r\n          position: 'absolute',\r\n          marginLeft: -15,\r\n          marginTop: -20,\r\n          zIndex: 2,\r\n          textAlign: 'right',\r\n          cursor: 'pointer',\r\n        }}\r\n        {...getHandleProps(id)}\r\n      >\r\n        <div style={{ fontFamily: 'Arial', fontSize: 16, marginTop: 15, marginLeft: 5, position:'absolute', zIndex: 3, color: \"#fff\"}}>\r\n          {value}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  // cm\r\n  let min_d = 5\r\n  let max_d = 50\r\n  let min_h = 10 \r\n  let max_h = 100\r\n\r\n  // in\r\n  if (!basketStore.cm){\r\n    const ratio = 2.54\r\n    min_d = Math.round(min_d/ratio)\r\n    max_d = Math.round(max_d/ratio)\r\n    max_h = Math.round(max_h/ratio)\r\n    min_h = Math.round(min_h/ratio)\r\n  }\r\n  \r\n  const sliderHeight = <Slider rootStyle={sliderStyle} domain={[min_h, max_h]} step={1} mode={2} values={[basketStore.height]} onUpdate={(val) => basketStore.update_height(val[0])} >\r\n    <Rail>\r\n      {({ getRailProps }) => (\r\n        <div style={railStyle} {...getRailProps()} />\r\n      )}\r\n    </Rail>\r\n    <Handles>\r\n      {({ handles, getHandleProps }) => (\r\n        <div className=\"slider-handles\">\r\n          {handles.map(handle => (\r\n            <Handle\r\n              key={handle.id}\r\n              handle={handle}\r\n              getHandleProps={getHandleProps}\r\n            />\r\n          ))}\r\n        </div>\r\n      )}\r\n    </Handles>\r\n  </Slider>\r\n  \r\n  const slider_diameter = <Slider rootStyle={sliderStyle} domain={[min_d, max_d]} step={1} mode={2} values={[basketStore.diameter]} onUpdate={(val) => basketStore.update_diameter(val[0])} >\r\n    <Rail>\r\n      {({ getRailProps }) => (\r\n        <div style={railStyle} {...getRailProps()} />\r\n      )}\r\n    </Rail>\r\n    <Handles>\r\n      {({ handles, getHandleProps }) => (\r\n        <div className=\"slider-handles\">\r\n          {handles.map(handle => (\r\n            <Handle\r\n              key={handle.id}\r\n              handle={handle}\r\n              getHandleProps={getHandleProps}\r\n            />\r\n          ))}\r\n        </div>\r\n      )}\r\n    </Handles>\r\n  </Slider>\r\n\r\n  const slider_dbottom = <Slider rootStyle={sliderStyle} domain={[min_d, max_d]} step={1} mode={2} values={[basketStore.dbottom]} onUpdate={(val) => basketStore.update_dbottom(val[0])} >\r\n  <Rail>\r\n    {({ getRailProps }) => (\r\n      <div style={railStyle} {...getRailProps()} />\r\n    )}\r\n  </Rail>\r\n  <Handles>\r\n    {({ handles, getHandleProps }) => (\r\n      <div className=\"slider-handles\">\r\n        {handles.map(handle => (\r\n          <Handle\r\n            key={handle.id}\r\n            handle={handle}\r\n            getHandleProps={getHandleProps}\r\n          />\r\n        ))}\r\n      </div>\r\n    )}\r\n  </Handles>\r\n  </Slider>\r\n\r\n  const slider_dtop = <Slider rootStyle={sliderStyle} domain={[min_d, max_d]} step={1} mode={2} values={[basketStore.dtop]} onUpdate={(val) => basketStore.update_dtop(val[0])} >\r\n  <Rail>\r\n    {({ getRailProps }) => (\r\n      <div style={railStyle} {...getRailProps()} />\r\n    )}\r\n  </Rail>\r\n  <Handles>\r\n    {({ handles, getHandleProps }) => (\r\n      <div className=\"slider-handles\">\r\n        {handles.map(handle => (\r\n          <Handle\r\n            key={handle.id}\r\n            handle={handle}\r\n            getHandleProps={getHandleProps}\r\n          />\r\n        ))}\r\n      </div>\r\n    )}\r\n  </Handles>\r\n  </Slider>\r\n  \r\n  const top_rim_switch = <div className=\"switch\"  style={{width: 100, height: 50}}>\r\n      <SwitchSelector\r\n          onChange={(val) => basketStore.update_top_rim(val)}\r\n          options={options}\r\n          initialSelectedIndex={basketStore.top_rim ? 0 : 1}\r\n          backgroundColor={\"#FFE7E5\"}\r\n          fontColor={\"#D75A58\"}\r\n          optionBorderRadius={30}\r\n      />\r\n  </div>\r\n  \r\n  const bottom_rim_switch = <div className=\"switch\"  style={{width: 100, height: 50}}>\r\n      <SwitchSelector\r\n          onChange={(val) => basketStore.update_bottom_rim(val)}\r\n          options={options}\r\n          initialSelectedIndex={basketStore.bottom_rim ? 0 : 1}\r\n          backgroundColor={\"#FFE7E5\"}\r\n          fontColor={\"#D75A58\"}\r\n          optionBorderRadius={30}\r\n      />\r\n  </div>\r\n  \r\n  const lid_switch = <div className=\"switch\"  style={{width: 100, height: 50}}>\r\n      <SwitchSelector\r\n          onChange={(val) => basketStore.update_lid(val)}\r\n          options={options}\r\n          initialSelectedIndex={basketStore.lid ? 0 : 1}\r\n          backgroundColor={\"#FFE7E5\"}\r\n          fontColor={\"#D75A58\"}\r\n          optionBorderRadius={30}\r\n      />\r\n  </div>\r\n  \r\n  const bottom_switch = <div className=\"switch\"  style={{width: 100, height: 50}}>\r\n  <SwitchSelector\r\n      onChange={(val) => basketStore.update_flat_bottom(!val)}\r\n      options={options}\r\n      initialSelectedIndex={basketStore.flat_bottom ? 1 : 0}\r\n      backgroundColor={\"#FFE7E5\"}\r\n      fontColor={\"#D75A58\"}\r\n      optionBorderRadius={30}\r\n  />\r\n</div>\r\n\r\n  const top_handle_switch = <div className=\"switch\"  style={{width: 100, height: 50}}>\r\n  <SwitchSelector\r\n      onChange={(val) => basketStore.update_top_handle(val)}\r\n      options={options}\r\n      initialSelectedIndex={basketStore.top_handle ? 0 : 1}\r\n      backgroundColor={\"#FFE7E5\"}\r\n      fontColor={\"#D75A58\"}\r\n      optionBorderRadius={30}\r\n  />\r\n  </div>\r\n\r\n  const side_handles_switch = <div className=\"switch\"  style={{width: 100, height: 50}}>\r\n  <SwitchSelector\r\n      onChange={(val) => basketStore.update_side_handles(val)}\r\n      options={options}\r\n      initialSelectedIndex={basketStore.side_handles ? 0 : 1}\r\n      backgroundColor={\"#FFE7E5\"}\r\n      fontColor={\"#D75A58\"}\r\n      optionBorderRadius={30}\r\n  />\r\n  </div>\r\n  \r\n  const units_switch = <div className=\"switch\" style={{width: 100, height: 50}}>\r\n      <SwitchSelector\r\n          onChange={(val) => basketStore.update_units(val)}\r\n          options={unitOptions}\r\n          initialSelectedIndex={basketStore.cm ? 0 : 1}\r\n          backgroundColor={\"#FFE7E5\"}\r\n          fontColor={\"#D75A58\"}\r\n          optionBorderRadius={30}\r\n      />\r\n  </div>\r\n\r\nfunction nextPage(){\r\n  coloringFormStore.setMsg()\r\n  basketStore.setSize()\r\n  const incremented_val = firebase.firestore.FieldValue.increment(1)\r\n  firestore.collection(\"diagrams_count\").doc(\"count\").update({count_value: incremented_val})\r\n}\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container\" style={{background: '#FFE7E5', display: 'flex', flexDirection:'row', width: 'auto', height: '690px'}}>\r\n        <div className=\"containerLeft\" style={{background: '#FFE7E5', width: '57%', height: 'auto',float:'left'}}>\r\n          <Canvas camera={{position:[0, 0, 100], fov:30, aspect: 800/600, near: 0.1,far: 1000}} style={{background: \"pink\", height: '80%', borderRadius:30, marginTop:'1%', marginLeft:'1%',width:'99%'}}>\r\n            <spotLight position={[-275, 150, 90]} intensity = {1.5}/>\r\n            <spotLight position={[10, 25, 90]} intensity = {1.3}/>\r\n            <spotLight position={[-150, -150, 110]} intensity = {0.6} />\r\n            <spotLight position={[150, -150, 110]} intensity={0.6} />\r\n            <spotLight position={[-10, 0, 25]} intensity={0.6} />\r\n            <Basket basketStore={basketStore} />\r\n          </Canvas>\r\n          <div className=\"containerCaption\">\r\n            <br/>\r\n            <a>Press <span>x</span> , <span>y</span> , and <span>z</span> to rotate the object ,<br/><span>q</span> and <span>w</span> to zoom in and out , <br/>and <span>space</span> to reset view to default . </a>\r\n          </div>\r\n        </div>\r\n        <div className=\"containerRight\" style={{width: '43%', height: '100%', overflow: 'visible', float:'right'}}>\r\n          <br />\r\n          <p className=\"textSwitch\">units</p>\r\n          {units_switch}\r\n          <div style={{display:'inline-block', width: '100%'}}>\r\n            <div style={{background: '#FFE7E5', width: '40.5%', float: 'left', marginBottom:30, marginLeft:25, marginTop:15}}>\r\n              <p className=\"text\">height</p>\r\n              {sliderHeight}\r\n              <p className=\"text\">top diameter</p>\r\n              {slider_dtop}\r\n            </div>\r\n            <div style={{background: '#FFE7E5', width: '40.5%', float: 'right', marginBottom:30, marginRight:30, marginTop:15}}>\r\n              <p className=\"text\">middle diameter</p>\r\n              {slider_diameter}\r\n              <p className=\"text\">bottom diameter</p>\r\n              {slider_dbottom}\r\n            </div>\r\n          </div>\r\n          <div style={{float: 'left', width: '33.3%', overflow:'visible', marginTop:25, marginBottom:10}}>\r\n            <p className=\"textSwitch\">top rim</p>\r\n            {top_rim_switch}\r\n          </div>\r\n          <div style={{float: 'left', width: '33.4%', overflow:'visible', marginTop:25, marginBottom:10}}>\r\n            <p className=\"textSwitch\">curved bottom</p>\r\n            {bottom_switch}\r\n          </div>\r\n          <div style={{float: 'left', width: '33.3%', overflow:'visible', marginTop:25, marginBottom:10}}>\r\n            <p className=\"textSwitch\">bottom rim</p>\r\n            {bottom_rim_switch}\r\n          </div>\r\n          <div style={{float: 'left', width: '33.3%', overflow:'visible', marginTop:25, marginBottom:10}}>\r\n            <p className=\"textSwitch\">top handle</p>\r\n            {top_handle_switch}\r\n          </div>\r\n          <div style={{float: 'left', width: '33.4%', overflow:'visible', marginTop:25, marginBottom:10}}>\r\n            <p className=\"textSwitch\">lid</p>\r\n            {lid_switch}\r\n          </div>\r\n          <div style={{float: 'left', width: '33.3%', overflow:'visible', marginTop:25, marginBottom:10}}>\r\n            <p className=\"textSwitch\">side handles</p>\r\n            {side_handles_switch}\r\n          </div>\r\n          <div className=\"done-basket\" style={{width: 80, marginBottom:35, display:'inline-block', marginTop: 30}}>\r\n            <NavBtn>\r\n              <NavBtnLink style={{background: \"#D14240\"}} onClick={nextPage} to='/colouring'>\r\n                <p className = \"buttonText\">done</p>\r\n              </NavBtnLink>\r\n            </NavBtn>\r\n          </div>\r\n        </div>\r\n      </div>\r\n  </>  \r\n  );\r\n};\r\n\r\nexport default observer(CreateBasket);","C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\components\\OrigamiObject\\index.js",["313"],"import React, {useRef} from 'react';\r\nimport DrawingSection from \"../DrawingSection\";\r\nimport { observer } from \"mobx-react\";\r\n\r\nconst OrigamiObject = (props) => {\r\n    const {caption, dimensions, formObject} = props;\r\n  \r\n    const objectRef = useRef();\r\n\r\n    let increasing = []\r\n    let specialTop = []\r\n    let specialBottom = []\r\n\r\n    if (formObject.model === \"swan\"){\r\n      specialTop = Array(dimensions.length).fill({})\r\n      specialBottom = Array(dimensions.length).fill({})\r\n    }\r\n    else {\r\n      if (dimensions.length > 1 && dimensions[dimensions.length-2][0] < dimensions[dimensions.length-1][0]) formObject.setInverted()\r\n\r\n      for (let i = dimensions.length-2; i >= 0; i--){\r\n        let sTopCurr = {}\r\n        let sBottomCurr = {}\r\n\r\n        const curr = dimensions[i+1][0]\r\n        const next = dimensions[i][0]\r\n        let diff = next-curr // number of pieces need to add or subtract \r\n\r\n        let distribute = 0 \r\n        let remainder = 0\r\n        let spacing = 0\r\n        if (diff === 0){\r\n          specialTop = Array(dimensions.length).fill({})\r\n          specialBottom = Array(dimensions.length).fill({})\r\n        }\r\n        else if (diff > 0){ // increasing - 2 pcs per increase\r\n          sBottomCurr  = {0: 1, 1: 0, 2: -1}\r\n          distribute = curr - (2 * diff)// pieces left to distribute for spacing \r\n          remainder = distribute >= 0 ? distribute % diff : curr-diff\r\n          spacing = Math.floor(distribute/diff)\r\n          let spacing_arr = Array(diff).fill(spacing)\r\n          for (let i = 0; i < 2; i++){\r\n            let j = i\r\n            while (j < diff && remainder > 0){\r\n              spacing_arr[j] += 1 \r\n              remainder -= 1 \r\n              j += 2 \r\n            }\r\n          }\r\n          let i = 0 \r\n          let idx = 0 \r\n          while(i < diff){\r\n            sTopCurr[idx] = 1\r\n            sTopCurr[idx+1] = -1\r\n            idx += spacing_arr[i] + 2\r\n            i += 1 \r\n          }\r\n          let last_idx = 2\r\n          for (let i = 0; i < spacing_arr.length-1; i ++){\r\n            sBottomCurr[last_idx + spacing_arr[i] + 1] = 1\r\n            sBottomCurr[last_idx + spacing_arr[i] + 2] = 0\r\n            sBottomCurr[last_idx + spacing_arr[i] + 3] = -1\r\n            last_idx = last_idx + spacing_arr[i] + 3\r\n          }  \r\n          specialTop.unshift(sTopCurr)\r\n          specialBottom.unshift(sBottomCurr)    \r\n          increasing.unshift(true) \r\n        } \r\n        else { // decreasing \r\n          sBottomCurr = {0: 1, 1: -1}\r\n          diff = -1 * diff\r\n          distribute = curr - (3 * diff)\r\n          remainder = distribute % diff\r\n          spacing = Math.floor(distribute/diff)\r\n          let spacing_arr = Array(diff).fill(spacing)\r\n          for (let i = 0; i < 2; i++){\r\n            let j = i\r\n            while (j < diff && remainder > 0){\r\n              spacing_arr[j] += 1 \r\n              remainder -= 1 \r\n              j += 2 \r\n            }\r\n          }\r\n          let i = 0 \r\n          let idx = 0 \r\n          while(i < diff){\r\n            sTopCurr[idx] = 1\r\n            sTopCurr[idx+1] = 0\r\n            sTopCurr[idx+2] = -1\r\n            idx += spacing_arr[i] + 3\r\n            i += 1 \r\n          }\r\n          let last_idx = 1\r\n          for (let i = 0; i < spacing_arr.length-1; i ++){\r\n            sBottomCurr[last_idx + spacing_arr[i] + 1] = 1\r\n            sBottomCurr[last_idx + spacing_arr[i] + 2] = -1\r\n            last_idx = last_idx + spacing_arr[i] + 2\r\n          }  \r\n          specialTop.unshift(sTopCurr)\r\n          specialBottom.unshift(sBottomCurr)  \r\n          increasing.unshift(false)\r\n        }\r\n      }\r\n      if (formObject.model === \"fig\"){\r\n        specialTop[specialTop.length-1] = {}\r\n        specialBottom[specialBottom.length-1] = {}\r\n      } \r\n      specialTop.unshift({})\r\n      specialBottom.push({})\r\n      increasing.push(false)\r\n    }\r\n\r\n    let sections = [];\r\n  \r\n    if (formObject.coloringFormData.length == 0){\r\n      for (let i = 0; i < dimensions.length; i++) {\r\n        formObject.addDrawingSection()\r\n      }\r\n    }\r\n    for (let i = 0; i < dimensions.length; i++) {\r\n      formObject.coloringFormData[i].setWidthHeight(dimensions[i][0], dimensions[i][1])\r\n      formObject.coloringFormData[i].setIncreasing(increasing[i])\r\n      let caption = false\r\n      if (formObject.model === \"fig\" && i === dimensions.length-1) caption = \"figurine body\"\r\n      sections.push(<DrawingSection key={i} caption={caption} specialTop = {specialTop[i]} specialBottom = {specialBottom[i]} formObject={formObject} DrawingSectionModel={formObject.coloringFormData[i]} />);\r\n    }\r\n    return (\r\n      <div id=\"origamiObject\">\r\n        <div id=\"sections\" ref={objectRef}>\r\n          <p id=\"text\">{caption}</p>\r\n          {sections}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\nexport default observer(OrigamiObject)","C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\components\\Sphere\\index.js",["314","315"],"import React from \"react\";\r\nimport UntrackedOrigamiObject from \"../UntrackedOrigamiObject\";\r\nimport \"../DrawingSection/drawingSection.css\"\r\n\r\nconst Sphere = (props) => {\r\n    const {size, caption, formObject} = props \r\n    let object = <div></div>\r\n    const spheres = {\r\n        small: [[4,2],[6,2],[8,5],[4,2]],\r\n        med: [[8,2],[10,2],[12,2],[16,4],[8,2],[4,2]],\r\n        big: [[16,2],[19,3],[23,2],[24,4],[16,3],[8,1],[4,2]]\r\n    }\r\n    let dimensions = spheres.med\r\n    if (size == \"small\") dimensions = spheres.small\r\n    else if (size == \"big\") dimensions = spheres.big\r\n    else {console.log(\"med\")}\r\n\r\n    object = <UntrackedOrigamiObject dimensions={dimensions} formObject={formObject} />\r\n\r\n    return (\r\n        <div>\r\n            <p id=\"text\">{caption}</p>\r\n            {object}\r\n        </div>\r\n    )\r\n  }\r\n\r\nexport default Sphere;","C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\components\\Rim\\index.js",["316","317","318"],"C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\components\\Figurine\\index.js",["319"],"import React, {useState, useMemo} from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport * as THREE from \"three\";\r\nimport grid from \"../../assets/paper.PNG\";\r\n\r\nconst Figurine = (props) => {\r\n    const {figStore} = props\r\n    const texture = useMemo(() => new THREE.TextureLoader().load(grid), []) \r\n\r\n    let display_diameter = figStore.diameter\r\n    if (!figStore.cm){\r\n        display_diameter = Math.round(display_diameter * 2.54)\r\n    }\r\n\r\n    const s_diameter = display_diameter \r\n    const s_diameter_h = 0\r\n\r\n    function getInputMarker(rad, height){\r\n        return (\r\n            <mesh position = {[0,height,0]}>\r\n                <cylinderGeometry args={[rad, rad, 0.25, 40, 1, true,0, Math.PI * 2]}/>\r\n                <meshPhongMaterial color=\"red\" />\r\n            </mesh>\r\n        )\r\n    }\r\n\r\n    const theta_len = 0.8\r\n    const goal_rad = (display_diameter * figStore.body_scale)/2\r\n    const head_rad = goal_rad/Math.sin((1-theta_len) * Math.PI)\r\n    const offset = head_rad*Math.cos((1-theta_len) * Math.PI) - 0.2\r\n\r\n    const head =\r\n    <group>\r\n        <mesh position={[0,(display_diameter * figStore.body_height) + offset,0]}>\r\n            <sphereGeometry args={[head_rad, 20, 14, 0, 2 * Math.PI, 0, Math.PI * theta_len]}/>\r\n            <meshPhongMaterial map = {texture}  side={THREE.FrontSide} specular=\"#121212\" shininess = {26}/>\r\n        </mesh>\r\n        <mesh position={[0,(display_diameter * figStore.body_height) + offset,0]}>\r\n            <sphereGeometry args={[head_rad, 20, 14, 0, 2 * Math.PI, 0, Math.PI * theta_len]}/>\r\n            <meshPhongMaterial map = {texture}  side={THREE.BackSide}/>\r\n        </mesh>\r\n    </group>\r\n\r\n    let bunny_ears = <mesh/>\r\n    let cat_ears = <mesh/> \r\n    let sphere_ears = <mesh/>\r\n    let bear_ears = <mesh/>\r\n    let arms = <mesh/>\r\n\r\n    class CustomCircleCurve extends THREE.Curve {\r\n        constructor(scale) {\r\n          super();\r\n          this.scale = scale;\r\n        }\r\n        getPoint(t) {\r\n          const tx = Math.cos(2 * Math.PI * t);\r\n          const ty = Math.max(-0.5, Math.sin(2 * Math.PI * t));\r\n          const tz = 0;\r\n          return new THREE.Vector3(tx, ty, tz).multiplyScalar(this.scale);\r\n        }\r\n    }\r\n\r\n    if(figStore.ears === \"bear\"){\r\n        const tube_scale = head_rad/3\r\n        const path = new CustomCircleCurve(tube_scale)\r\n        const segs = 40\r\n        const tube_rad = Math.min(0.5, tube_scale/7)\r\n        const rad_segs = 7\r\n        const closed = false\r\n        const y_pos = (display_diameter * figStore.body_height) + offset + tube_scale/4 + (head_rad * Math.cos(Math.PI/4))\r\n\r\n        bear_ears =  \r\n        <group>\r\n        <mesh position={[-(head_rad * Math.cos(Math.PI/4) + tube_scale/5),y_pos,0]} rotation={[0,0,Math.PI/4]} >\r\n            <tubeGeometry args={[path, segs, tube_rad, rad_segs, closed]} />\r\n            <meshPhongMaterial map={texture} side = {THREE.FrontSide} />\r\n        </mesh>\r\n        <mesh position={[(head_rad * Math.cos(Math.PI/4) + tube_scale/5),y_pos,0]} rotation={[0,0,-Math.PI/4]}>\r\n            <tubeGeometry args={[path, segs, tube_rad, rad_segs, closed]} />\r\n            <meshPhongMaterial  map={texture} side = {THREE.FrontSide} />\r\n        </mesh>\r\n        </group>\r\n    }\r\n\r\n    if(figStore.ears === \"cat\"){\r\n        const shape = new THREE.Shape();\r\n        const y_pos = (display_diameter * figStore.body_height) + offset + (head_rad * Math.cos(Math.PI/4))\r\n        const half_side_len = (head_rad/1.5)/2\r\n        shape.moveTo(-half_side_len,0);\r\n        shape.quadraticCurveTo(-half_side_len/1.2, half_side_len * 1.3, 0,half_side_len * 1.8);\r\n        shape.quadraticCurveTo(half_side_len/1.2, half_side_len * 1.3, half_side_len,0);\r\n        shape.lineTo(-half_side_len,0);\r\n\r\n        const extrudeSettings = {\r\n            steps: 1,  \r\n            depth: 1,  \r\n            bevelEnabled: false,  \r\n          };\r\n\r\n        cat_ears = \r\n        <group>\r\n        <mesh position={[(head_rad * Math.cos(Math.PI/4) - half_side_len/3),y_pos,0]} rotation={[0,0,-Math.PI/4.5]}>\r\n            <extrudeGeometry args={[shape, extrudeSettings]}/>\r\n            <meshPhongMaterial  map={texture} side={THREE.FrontSide} specular=\"#121212\" shininess = {26}/>        \r\n        </mesh>\r\n        <mesh position={[-(head_rad * Math.cos(Math.PI/4) - half_side_len/3),y_pos,0]} rotation={[0,0,Math.PI/4.5]}>\r\n            <extrudeGeometry args={[shape, extrudeSettings]}/>\r\n            <meshPhongMaterial  map={texture} side={THREE.FrontSide} specular=\"#121212\" shininess = {26}/>        \r\n        </mesh>\r\n        </group>\r\n\r\n    }\r\n\r\n    if(figStore.ears === \"bunny\"){\r\n        const bshape = new THREE.Shape();\r\n        const y_pos = (display_diameter * figStore.body_height) + offset + (head_rad * Math.cos(Math.PI/4))\r\n        const half_side_len = (head_rad/2)/2\r\n        bshape.moveTo(-half_side_len,0);\r\n        bshape.lineTo(-half_side_len, half_side_len * 3)\r\n        bshape.quadraticCurveTo(-half_side_len/2, (half_side_len * 4), 0,half_side_len * 4);\r\n        bshape.quadraticCurveTo(half_side_len/2, half_side_len * 4, half_side_len, half_side_len * 3);\r\n        bshape.lineTo(half_side_len,0);\r\n\r\n        const extrudeSettings = {\r\n            steps: 1,  \r\n            depth: 1,  \r\n            bevelEnabled: false,  \r\n          };\r\n\r\n        bunny_ears = \r\n        <group>\r\n        <mesh position={[(head_rad * Math.cos(Math.PI/4) - half_side_len/3),y_pos,0]} rotation={[0,0,-Math.PI/4]}>\r\n            <extrudeGeometry args={[bshape, extrudeSettings]}/>\r\n            <meshPhongMaterial  map={texture} side={THREE.FrontSide} specular=\"#121212\" shininess = {26}/>        \r\n        </mesh>\r\n        <mesh position={[-(head_rad * Math.cos(Math.PI/4) - half_side_len/3),y_pos,0]} rotation={[0,0,Math.PI/4]}>\r\n            <extrudeGeometry args={[bshape, extrudeSettings]}/>\r\n            <meshPhongMaterial  map={texture} side={THREE.FrontSide} specular=\"#121212\" shininess = {26}/>        \r\n        </mesh>\r\n        </group>\r\n    }\r\n\r\n    if(figStore.ears === \"sphere\"){\r\n        const ear_rad = head_rad/3.5\r\n        const y_pos = (display_diameter * figStore.body_height) + offset + ear_rad + (head_rad * Math.cos(Math.PI/4))\r\n        sphere_ears = \r\n        <group>\r\n            <mesh position={[-(head_rad * Math.cos(Math.PI/4)),y_pos,0]} rotation={[0,0,Math.PI/4]}>\r\n                <sphereGeometry args={[ear_rad, 20, 14, 0, 2 * Math.PI, 0, Math.PI ]}/>\r\n                <meshPhongMaterial  map={texture} side={THREE.FrontSide} specular=\"#121212\" shininess = {26}/>\r\n            </mesh>\r\n            <mesh position={[(head_rad * Math.cos(Math.PI/4)),y_pos,0]} rotation={[0,0,-Math.PI/4]}>\r\n                <sphereGeometry args={[ear_rad, 20, 14, 0, 2 * Math.PI, 0, Math.PI ]}/>\r\n                <meshPhongMaterial  map={texture} side={THREE.FrontSide} specular=\"#121212\" shininess = {26}/>\r\n            </mesh>\r\n        </group>\r\n    }\r\n\r\n    if (figStore.arms){\r\n        const arm_rad = display_diameter/7\r\n        const y_pos = (display_diameter * figStore.body_height)/2\r\n        const x_pos = (display_diameter * figStore.body_scale)/2 + arm_rad*1.3\r\n        arms = \r\n        <group>\r\n            <mesh position={[-(x_pos),y_pos,0]} rotation={[0,0,Math.PI/2.65]}>\r\n                <cylinderGeometry args={[arm_rad, arm_rad, arm_rad*1.3, 15]} />\r\n                <meshPhongMaterial  map={texture} side={THREE.FrontSide} specular=\"#121212\" shininess = {26}/>\r\n            </mesh>\r\n            <mesh position={[x_pos,y_pos,0]} rotation={[0,0,-Math.PI/2.65]}>\r\n                <cylinderGeometry args={[arm_rad, arm_rad, arm_rad*1.3, 15]} />\r\n                <meshPhongMaterial  map={texture} side={THREE.FrontSide} specular=\"#121212\" shininess = {26}/>\r\n            </mesh>\r\n        </group>\r\n    }\r\n\r\n    const points = figStore.updateCurvedPts()\r\n    const diameter_marker = getInputMarker((s_diameter/2) + 0.1, s_diameter_h)\r\n\r\n    let [x_rot,changeXrot] = useState(0);\r\n    let [y_rot,changeYrot] = useState(0);\r\n    let [z_rot,changeZrot] = useState(0);\r\n    let [dist,changeDist] = useState(0);\r\n\r\n    const handleKeyDown = (event) => {\r\n        switch(event.key)\r\n        {\r\n            case \"x\":\r\n                    x_rot = x_rot + 0.1\r\n                    changeXrot(x_rot);\r\n                    break;\r\n            case \"y\": \r\n                    y_rot = y_rot + 0.1\r\n                    changeYrot(y_rot);\r\n                    break;\r\n            case \"z\": \r\n                    z_rot = z_rot + 0.1\r\n                    changeZrot(z_rot);\r\n                    break;\r\n            case \"w\": \r\n                    dist = Math.max(dist - 5,-300)\r\n                    changeDist(dist)\r\n                    break;\r\n            case \"q\": \r\n                    dist = Math.min(dist + 5,50)\r\n                    changeDist(dist)\r\n                    break;\r\n            case \" \": \r\n                    event.preventDefault()\r\n                    x_rot = 0\r\n                    y_rot = 0\r\n                    z_rot = 0 \r\n                    dist = 0\r\n                    changeXrot(x_rot)\r\n                    changeYrot(y_rot)\r\n                    changeZrot(z_rot)\r\n                    changeDist(dist)\r\n                    break;\r\n            default: \r\n                    break;\r\n        }\r\n    };\r\n    \r\n    React.useEffect(() => {\r\n        window.addEventListener('keydown', handleKeyDown);\r\n\r\n        // cleanup this component\r\n        return () => {\r\n            window.removeEventListener('keydown', handleKeyDown);\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <group position={[0,-7,dist]} rotation={[x_rot,y_rot,z_rot]}> \r\n            <mesh >\r\n                <latheGeometry args={[points, 30, 0, 2*Math.PI]}/>\r\n                <meshPhongMaterial map = {texture}  side={THREE.FrontSide} specular=\"#121212\" shininess = {26}/>\r\n            </mesh>\r\n            <mesh>\r\n                <latheGeometry args={[points, 30, 0, 2*Math.PI]}/>\r\n                <meshPhongMaterial map = {texture}  side = {THREE.BackSide} />\r\n            </mesh>\r\n            {head}\r\n            {diameter_marker}\r\n            {figStore.ears === \"bear\" && bear_ears}\r\n            {figStore.ears === \"bunny\" && bunny_ears}\r\n            {figStore.ears === \"cat\" && cat_ears}\r\n            {figStore.ears === \"sphere\" && sphere_ears}\r\n            {figStore.arms && arms}\r\n        </group>\r\n    )\r\n  }\r\n\r\nexport default observer(Figurine);","C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\pages\\create-swan.js",["320","321"],"import React, {useEffect} from \"react\";\r\nimport {\r\n  NavBtn,\r\n  NavBtnLink\r\n} from '../components/Navbar/NavbarElements';\r\nimport { Canvas} from \"react-three-fiber\";\r\nimport Swan from \"../components/Swan\"\r\nimport './create-vase.css'\r\nimport { Slider, Rail, Handles} from \"react-compound-slider\";\r\nimport SwitchSelector from \"react-switch-selector\";\r\nimport { observer } from \"mobx-react\";\r\nimport { useStores } from \"../models/RootStoreContext\"\r\nimport firebase from 'firebase/app'\r\nimport { firestore } from \"../firebase\"\r\n\r\nconst CreateSwan = () => {\r\n\r\n  const { swanStore, coloringFormStore } = useStores();\r\n\r\n  useEffect(() => {\r\n    coloringFormStore.setMsg(true, \"error\")\r\n    coloringFormStore.clearColoringForm()\r\n    coloringFormStore.setModel(\"swan\", swanStore.wings)\r\n  }, [swanStore.wings])\r\n\r\n  const ears_options = [\r\n    {\r\n        label: \"∧ ∧\",\r\n        value: true,\r\n        selectedBackgroundColor: \"#E28988\",\r\n    },  {\r\n        label: \"∧\",\r\n        value: false,\r\n        selectedBackgroundColor: \"#E28988\"\r\n    }\r\n  ];\r\n\r\n  const options = [\r\n    {\r\n        label: \"y\",\r\n        value: true,\r\n        selectedBackgroundColor: \"#E28988\",\r\n    },  {\r\n        label: \"n\",\r\n        value: false,\r\n        selectedBackgroundColor: \"#E28988\"\r\n    }\r\n  ];\r\n  \r\n  const unitOptions = [\r\n    {\r\n        label: \"cm\",\r\n        value: true,\r\n        selectedBackgroundColor: \"#E28988\",\r\n    },  {\r\n        label: \"in\",\r\n        value: false,\r\n        selectedBackgroundColor: \"#E28988\"\r\n    }\r\n  ];\r\n\r\n  const sliderStyle = {  // Give the slider some width\r\n    position: 'relative',\r\n    width: '100%',\r\n    height: 15,\r\n    // border: '1px solid steelblue',\r\n  }\r\n  \r\n  const railStyle = {\r\n    position: 'absolute',\r\n    width: '100%',\r\n    height: 9,\r\n    // marginTop: 35,\r\n    borderRadius: 5,\r\n    backgroundColor: 'pink',\r\n  }\r\n  \r\n  function Handle({\r\n    handle: { id, value, percent },\r\n    getHandleProps\r\n  }) {\r\n    return (\r\n      <div className = \"straw\"\r\n        style={{\r\n          left: `${percent}%`,\r\n          position: 'absolute',\r\n          marginLeft: -15,\r\n          marginTop: -20,\r\n          zIndex: 2,\r\n          textAlign: 'right',\r\n          cursor: 'pointer',\r\n        }}\r\n        {...getHandleProps(id)}\r\n      >\r\n        <div style={{ fontFamily: 'Arial', fontSize: 16, marginTop: 15, marginLeft: 5, position:'absolute', zIndex: 3, color: \"#fff\"}}>\r\n          {value}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  // cm\r\n  let min_d = 5\r\n  let max_d = 50\r\n\r\n  // in\r\n  if (!swanStore.cm){\r\n    const ratio = 2.54\r\n    min_d = Math.round(min_d/ratio)\r\n    max_d = Math.round(max_d/ratio)\r\n  }\r\n    \r\n  const slider_diameter = <Slider rootStyle={sliderStyle} domain={[min_d, max_d]} step={1} mode={2} values={[swanStore.diameter]} onUpdate={(val) => swanStore.update_diameter(val[0])} >\r\n    <Rail>\r\n      {({ getRailProps }) => (\r\n        <div style={railStyle} {...getRailProps()} />\r\n      )}\r\n    </Rail>\r\n    <Handles>\r\n      {({ handles, getHandleProps }) => (\r\n        <div className=\"slider-handles\">\r\n          {handles.map(handle => (\r\n            <Handle\r\n              key={handle.id}\r\n              handle={handle}\r\n              getHandleProps={getHandleProps}\r\n            />\r\n          ))}\r\n        </div>\r\n      )}\r\n    </Handles>\r\n  </Slider>\r\n\r\nconst bottom_rim_switch = <div className=\"switch\"  style={{width: 100, height: 50}}>\r\n<SwitchSelector\r\n    onChange={(val) => swanStore.update_bottom_rim(val)}\r\n    options={options}\r\n    initialSelectedIndex={swanStore.bottom_rim ? 0 : 1}\r\n    backgroundColor={\"#FFE7E5\"}\r\n    fontColor={\"#D75A58\"}\r\n    optionBorderRadius={30}\r\n/>\r\n</div>\r\n  \r\nconst wings_switch = <div className=\"switch\"  style={{width: 100, height: 50}}>\r\n<SwitchSelector\r\n    onChange={(val) => swanStore.update_wings(val)}\r\n    options={ears_options}\r\n    initialSelectedIndex={swanStore.wings? 0 : 1}\r\n    backgroundColor={\"#FFE7E5\"}\r\n    fontColor={\"#D75A58\"}\r\n    optionBorderRadius={30}\r\n/>\r\n</div>\r\n  \r\n  const units_switch = <div className=\"switch\" style={{width: 100, height: 50}}>\r\n      <SwitchSelector\r\n          onChange={(val) => swanStore.update_units(val)}\r\n          options={unitOptions}\r\n          initialSelectedIndex={swanStore.cm ? 0 : 1}\r\n          backgroundColor={\"#FFE7E5\"}\r\n          fontColor={\"#D75A58\"}\r\n          optionBorderRadius={30}\r\n      />\r\n  </div>\r\n\r\nfunction nextPage(){\r\n  coloringFormStore.setMsg()\r\n  swanStore.setSize()\r\n  const incremented_val = firebase.firestore.FieldValue.increment(1)\r\n  firestore.collection(\"diagrams_count\").doc(\"count\").update({count_value: incremented_val})\r\n}\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container\" style={{background: '#FFE7E5', display: 'flex', flexDirection:'row', width: 'auto', height: 'auto'}}>\r\n        <div className=\"containerLeft\" style={{background: '#FFE7E5', width: '57%', height: 'auto',float:'left'}}>\r\n          <Canvas camera={{position:[0, 0, 80], fov:30, aspect: 800/600, near: 0.1,far: 1000}} style={{background: \"pink\", height: '400px', borderRadius:30, marginTop:'1%', marginLeft:'1%',width:'99%'}}>\r\n            <spotLight position={[-275, 150, 90]} intensity = {1.5}/>\r\n            <spotLight position={[10, 25, 90]} intensity = {1.3}/>\r\n            <spotLight position={[-150, -150, 110]} intensity = {0.6} />\r\n            <spotLight position={[150, -150, 110]} intensity={0.6} />\r\n            <spotLight position={[-10, 0, 25]} intensity={0.6} />\r\n            <Swan swanStore={swanStore} result={false}/>\r\n          </Canvas>\r\n          <div className=\"containerCaption-fig\">\r\n            <div style={{height: 13}}/>\r\n            <a>Press <span>x</span> , <span>y</span> , and <span>z</span> to rotate the object ,<br/><span>q</span> and <span>w</span> to zoom in and out , <br/>and <span>space</span> to reset view to default . </a>\r\n            <div style={{height: 13}}/>\r\n          </div>\r\n        </div>\r\n        <div className=\"containerRight\" style={{width: '43%', height: '100%', overflow: 'visible', float:'right'}}>\r\n          <br />\r\n          <br />\r\n          <br />\r\n          <p className=\"textSwitch\">units</p>\r\n          {units_switch}\r\n          <br/>\r\n          <p className=\"text\">body diameter</p>\r\n          <div style={{width:'88%', marginLeft:'5%'}}>\r\n            {slider_diameter}\r\n          </div>\r\n          <br/>\r\n          <div style={{display: \"inline-block\", width: \"50%\"}}>\r\n          <p className=\"text\">wings</p>\r\n          {wings_switch}\r\n          </div>\r\n          <div style={{display: \"inline-block\", width: \"50%\"}}>\r\n          <p className=\"text\">bottom_rim</p>\r\n          {bottom_rim_switch}\r\n          </div>\r\n          <div className=\"done-basket\" style={{width: 80, marginBottom:35}}>\r\n            <NavBtn>\r\n              <NavBtnLink style={{background: \"#D14240\"}} onClick={nextPage} to='/colouring'>\r\n                <p className = \"buttonText\">done</p>\r\n              </NavBtnLink>\r\n            </NavBtn>\r\n          </div>\r\n        </div>\r\n      </div>\r\n  </>  \r\n  );\r\n};\r\n\r\nexport default observer(CreateSwan);","C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\models\\RowModel.js",[],"C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\components\\Swan\\index.js",["322","323","324","325","326","327"],"C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\components\\UntrackedDrawingSection\\index.js",["328","329","330","331","332","333"],"  \r\nimport React, { useRef, useEffect } from \"react\";\r\nimport \"../DrawingSection/drawingSection.css\";\r\nimport UntrackedRow from \"../UntrackedRow\";\r\nimport SpecialRow from \"../SpecialRow\";\r\nimport { observer } from \"mobx-react\";\r\n\r\nconst UntrackedDrawingSection = (props) => {\r\n  const {arm, open, bunny, specialTop, specialBottom, increasing, formObject, dimensions} = props;\r\n\r\n  let rows = []; \r\n  let inverted = false\r\n\r\n  if (!bunny) rows.push(<SpecialRow key={-1} offset={0} width={dimensions[0]} specialTop={specialTop} />)\r\n  else{\r\n    const end_width = Math.floor(dimensions[0]*(0.5))\r\n    const num_rows = dimensions[0] - end_width\r\n    for (let i = 0; i < num_rows; i++){\r\n      rows.push(<UntrackedRow key={dimensions[1]+1+i} numPx={end_width+i} offset={10.5*(num_rows-i)} formObject={formObject} display={dimensions[1]+num_rows-i} inverted={inverted}/>)\r\n    }\r\n\r\n  }\r\n  \r\n  for (let i = 0; i < dimensions[1]; i++) {\r\n    arm && i == dimensions[1]-1 ? inverted = true : inverted = false\r\n    if (i%2 == 1){\r\n      let numPx = dimensions[0]\r\n      if (open) numPx -= 1\r\n      rows.push(<UntrackedRow key={i} numPx={numPx} offset={10.5} formObject={formObject} display={dimensions[1]-i} inverted={inverted}/>);\r\n    }\r\n    else{ \r\n      rows.push(<UntrackedRow key={i} numPx={dimensions[0]} offset={0} formObject={formObject} display={dimensions[1]-i} inverted={inverted}/>);\r\n    }\r\n  }\r\n  \r\n  if(increasing){\r\n    if (dimensions[1]%2 == 1){\r\n      rows.push(<SpecialRow key={dimensions[1]} offset={10.5} width={dimensions[0]} specialBottom={specialBottom} />)\r\n    } else {\r\n      rows.push(<SpecialRow key={dimensions[1]} offset={10.5*2} width={dimensions[0]} specialBottom={specialBottom} />)\r\n    }\r\n  }\r\n  else{\r\n    if (dimensions[1]%2 == 1){\r\n      rows.push(<SpecialRow key={dimensions[1]} offset={0} width={dimensions[0]} specialBottom={specialBottom} />)\r\n    } else {\r\n      rows.push(<SpecialRow key={dimensions[1]} offset={10.5} width={dimensions[0]} specialBottom={specialBottom} />)\r\n    }\r\n  } \r\n\r\n  return (\r\n    <div id=\"drawingSection\" >\r\n      <div id=\"pixels\" style={{marginBottom: 10, marginLeft: 40, marginRight: 40}}>\r\n        {rows}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default observer(UntrackedDrawingSection)","C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\components\\Navbar\\NavbarElements.js",[],"C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\components\\Wing\\index.js",["334","335","336","337","338","339","340","341"],"C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\pages\\create-vase.js",["342","343","344","345"],"C:\\Users\\Lina\\Downloads\\Lina\\3d-o\\frontend\\src\\components\\SpecialPixel\\index.js",["346"],{"ruleId":"347","replacedBy":"348"},{"ruleId":"349","replacedBy":"350"},{"ruleId":"351","severity":1,"message":"352","line":1,"column":17,"nodeType":"353","messageId":"354","endLine":1,"endColumn":30},{"ruleId":"351","severity":1,"message":"355","line":1,"column":32,"nodeType":"353","messageId":"354","endLine":1,"endColumn":42},{"ruleId":"351","severity":1,"message":"356","line":2,"column":8,"nodeType":"353","messageId":"354","endLine":2,"endColumn":17},{"ruleId":"347","replacedBy":"357"},{"ruleId":"349","replacedBy":"358"},{"ruleId":"347","replacedBy":"359"},{"ruleId":"349","replacedBy":"360"},{"ruleId":"361","severity":1,"message":"362","line":91,"column":21,"nodeType":"363","messageId":"364","endLine":91,"endColumn":23},{"ruleId":"361","severity":1,"message":"362","line":93,"column":21,"nodeType":"363","messageId":"364","endLine":93,"endColumn":23},{"ruleId":"361","severity":1,"message":"362","line":93,"column":39,"nodeType":"363","messageId":"364","endLine":93,"endColumn":41},{"ruleId":"347","replacedBy":"365"},{"ruleId":"349","replacedBy":"366"},{"ruleId":"367","severity":1,"message":"368","line":23,"column":56,"nodeType":"369","endLine":23,"endColumn":71},{"ruleId":"367","severity":1,"message":"368","line":25,"column":101,"nodeType":"369","endLine":25,"endColumn":116},{"ruleId":"367","severity":1,"message":"368","line":28,"column":47,"nodeType":"369","endLine":28,"endColumn":62},{"ruleId":"367","severity":1,"message":"368","line":30,"column":53,"nodeType":"369","endLine":30,"endColumn":68},{"ruleId":"351","severity":1,"message":"370","line":66,"column":9,"nodeType":"353","messageId":"354","endLine":66,"endColumn":18},{"ruleId":"371","severity":1,"message":"372","line":24,"column":6,"nodeType":"373","endLine":24,"endColumn":8,"suggestions":"374"},{"ruleId":"375","severity":1,"message":"376","line":201,"column":13,"nodeType":"377","endLine":201,"endColumn":16},{"ruleId":"371","severity":1,"message":"378","line":59,"column":6,"nodeType":"373","endLine":59,"endColumn":8,"suggestions":"379"},{"ruleId":"375","severity":1,"message":"376","line":78,"column":13,"nodeType":"377","endLine":78,"endColumn":16},{"ruleId":"351","severity":1,"message":"380","line":5,"column":3,"nodeType":"353","messageId":"354","endLine":5,"endColumn":7},{"ruleId":"351","severity":1,"message":"381","line":7,"column":3,"nodeType":"353","messageId":"354","endLine":7,"endColumn":9},{"ruleId":"351","severity":1,"message":"382","line":8,"column":3,"nodeType":"353","messageId":"354","endLine":8,"endColumn":13},{"ruleId":"361","severity":1,"message":"383","line":41,"column":24,"nodeType":"363","messageId":"364","endLine":41,"endColumn":26},{"ruleId":"361","severity":1,"message":"362","line":24,"column":26,"nodeType":"363","messageId":"364","endLine":24,"endColumn":28},{"ruleId":"361","severity":1,"message":"362","line":38,"column":26,"nodeType":"363","messageId":"364","endLine":38,"endColumn":28},{"ruleId":"371","severity":1,"message":"384","line":18,"column":9,"nodeType":"373","endLine":18,"endColumn":11,"suggestions":"385"},{"ruleId":"371","severity":1,"message":"386","line":20,"column":119,"nodeType":"373","endLine":20,"endColumn":121,"suggestions":"387"},{"ruleId":"371","severity":1,"message":"388","line":235,"column":8,"nodeType":"373","endLine":235,"endColumn":10,"suggestions":"389"},{"ruleId":"347","replacedBy":"390"},{"ruleId":"349","replacedBy":"391"},{"ruleId":"361","severity":1,"message":"362","line":19,"column":22,"nodeType":"363","messageId":"364","endLine":19,"endColumn":24},{"ruleId":"361","severity":1,"message":"362","line":23,"column":27,"nodeType":"363","messageId":"364","endLine":23,"endColumn":29},{"ruleId":"361","severity":1,"message":"362","line":26,"column":18,"nodeType":"363","messageId":"364","endLine":26,"endColumn":20},{"ruleId":"361","severity":1,"message":"362","line":26,"column":43,"nodeType":"363","messageId":"364","endLine":26,"endColumn":45},{"ruleId":"351","severity":1,"message":"392","line":1,"column":16,"nodeType":"353","messageId":"354","endLine":1,"endColumn":25},{"ruleId":"351","severity":1,"message":"392","line":1,"column":16,"nodeType":"353","messageId":"354","endLine":1,"endColumn":25},{"ruleId":"361","severity":1,"message":"362","line":14,"column":31,"nodeType":"363","messageId":"364","endLine":14,"endColumn":33},{"ruleId":"371","severity":1,"message":"393","line":20,"column":6,"nodeType":"373","endLine":20,"endColumn":8,"suggestions":"394"},{"ruleId":"371","severity":1,"message":"395","line":31,"column":6,"nodeType":"373","endLine":31,"endColumn":31,"suggestions":"396"},{"ruleId":"361","severity":1,"message":"362","line":95,"column":21,"nodeType":"363","messageId":"364","endLine":95,"endColumn":23},{"ruleId":"361","severity":1,"message":"362","line":97,"column":21,"nodeType":"363","messageId":"364","endLine":97,"endColumn":23},{"ruleId":"361","severity":1,"message":"362","line":97,"column":39,"nodeType":"363","messageId":"364","endLine":97,"endColumn":41},{"ruleId":"361","severity":1,"message":"362","line":198,"column":30,"nodeType":"363","messageId":"364","endLine":198,"endColumn":32},{"ruleId":"361","severity":1,"message":"362","line":212,"column":30,"nodeType":"363","messageId":"364","endLine":212,"endColumn":32},{"ruleId":"351","severity":1,"message":"397","line":6,"column":8,"nodeType":"353","messageId":"354","endLine":6,"endColumn":13},{"ruleId":"371","severity":1,"message":"372","line":15,"column":6,"nodeType":"373","endLine":15,"endColumn":8,"suggestions":"398"},{"ruleId":"351","severity":1,"message":"399","line":1,"column":17,"nodeType":"353","messageId":"354","endLine":1,"endColumn":23},{"ruleId":"351","severity":1,"message":"392","line":1,"column":44,"nodeType":"353","messageId":"354","endLine":1,"endColumn":53},{"ruleId":"351","severity":1,"message":"400","line":2,"column":9,"nodeType":"353","messageId":"354","endLine":2,"endColumn":17},{"ruleId":"401","severity":1,"message":"402","line":110,"column":13,"nodeType":"403","messageId":"404","endLine":111,"endColumn":27},{"ruleId":"371","severity":1,"message":"388","line":122,"column":8,"nodeType":"373","endLine":122,"endColumn":10,"suggestions":"405"},{"ruleId":"361","severity":1,"message":"362","line":20,"column":17,"nodeType":"363","messageId":"364","endLine":20,"endColumn":19},{"ruleId":"351","severity":1,"message":"399","line":1,"column":17,"nodeType":"353","messageId":"354","endLine":1,"endColumn":23},{"ruleId":"351","severity":1,"message":"392","line":1,"column":44,"nodeType":"353","messageId":"354","endLine":1,"endColumn":53},{"ruleId":"401","severity":1,"message":"402","line":197,"column":13,"nodeType":"403","messageId":"404","endLine":198,"endColumn":27},{"ruleId":"371","severity":1,"message":"388","line":209,"column":8,"nodeType":"373","endLine":209,"endColumn":10,"suggestions":"406"},{"ruleId":"351","severity":1,"message":"399","line":1,"column":16,"nodeType":"353","messageId":"354","endLine":1,"endColumn":22},{"ruleId":"361","severity":1,"message":"362","line":24,"column":16,"nodeType":"363","messageId":"364","endLine":24,"endColumn":18},{"ruleId":"351","severity":1,"message":"399","line":1,"column":38,"nodeType":"353","messageId":"354","endLine":1,"endColumn":44},{"ruleId":"371","severity":1,"message":"393","line":24,"column":6,"nodeType":"373","endLine":24,"endColumn":8,"suggestions":"407"},{"ruleId":"361","severity":1,"message":"362","line":31,"column":24,"nodeType":"363","messageId":"364","endLine":31,"endColumn":26},{"ruleId":"371","severity":1,"message":"408","line":35,"column":6,"nodeType":"373","endLine":35,"endColumn":31,"suggestions":"409"},{"ruleId":"361","severity":1,"message":"383","line":41,"column":20,"nodeType":"363","messageId":"364","endLine":41,"endColumn":22},{"ruleId":"351","severity":1,"message":"410","line":2,"column":8,"nodeType":"353","messageId":"354","endLine":2,"endColumn":14},{"ruleId":"351","severity":1,"message":"411","line":3,"column":8,"nodeType":"353","messageId":"354","endLine":3,"endColumn":15},{"ruleId":"351","severity":1,"message":"412","line":4,"column":8,"nodeType":"353","messageId":"354","endLine":4,"endColumn":16},{"ruleId":"351","severity":1,"message":"413","line":5,"column":8,"nodeType":"353","messageId":"354","endLine":5,"endColumn":22},{"ruleId":"351","severity":1,"message":"414","line":9,"column":3,"nodeType":"353","messageId":"354","endLine":9,"endColumn":9},{"ruleId":"351","severity":1,"message":"415","line":11,"column":3,"nodeType":"353","messageId":"354","endLine":11,"endColumn":13},{"ruleId":"361","severity":1,"message":"362","line":195,"column":21,"nodeType":"363","messageId":"364","endLine":195,"endColumn":23},{"ruleId":"361","severity":1,"message":"362","line":197,"column":21,"nodeType":"363","messageId":"364","endLine":197,"endColumn":23},{"ruleId":"361","severity":1,"message":"362","line":197,"column":39,"nodeType":"363","messageId":"364","endLine":197,"endColumn":41},{"ruleId":"361","severity":1,"message":"362","line":263,"column":32,"nodeType":"363","messageId":"364","endLine":263,"endColumn":34},{"ruleId":"361","severity":1,"message":"362","line":267,"column":39,"nodeType":"363","messageId":"364","endLine":267,"endColumn":41},{"ruleId":"361","severity":1,"message":"362","line":337,"column":30,"nodeType":"363","messageId":"364","endLine":337,"endColumn":32},{"ruleId":"361","severity":1,"message":"362","line":352,"column":30,"nodeType":"363","messageId":"364","endLine":352,"endColumn":32},{"ruleId":"361","severity":1,"message":"362","line":358,"column":27,"nodeType":"363","messageId":"364","endLine":358,"endColumn":29},{"ruleId":"361","severity":1,"message":"362","line":417,"column":24,"nodeType":"363","messageId":"364","endLine":417,"endColumn":26},{"ruleId":"361","severity":1,"message":"362","line":417,"column":48,"nodeType":"363","messageId":"364","endLine":417,"endColumn":50},{"ruleId":"361","severity":1,"message":"362","line":447,"column":45,"nodeType":"363","messageId":"364","endLine":447,"endColumn":47},{"ruleId":"361","severity":1,"message":"362","line":477,"column":59,"nodeType":"363","messageId":"364","endLine":477,"endColumn":61},{"ruleId":"361","severity":1,"message":"362","line":490,"column":48,"nodeType":"363","messageId":"364","endLine":490,"endColumn":50},{"ruleId":"371","severity":1,"message":"372","line":24,"column":6,"nodeType":"373","endLine":24,"endColumn":8,"suggestions":"416"},{"ruleId":"375","severity":1,"message":"376","line":287,"column":13,"nodeType":"377","endLine":287,"endColumn":16},{"ruleId":"361","severity":1,"message":"362","line":115,"column":44,"nodeType":"363","messageId":"364","endLine":115,"endColumn":46},{"ruleId":"361","severity":1,"message":"362","line":14,"column":14,"nodeType":"363","messageId":"364","endLine":14,"endColumn":16},{"ruleId":"361","severity":1,"message":"362","line":15,"column":19,"nodeType":"363","messageId":"364","endLine":15,"endColumn":21},{"ruleId":"417","severity":1,"message":"418","line":27,"column":22,"nodeType":"377","endLine":27,"endColumn":61},{"ruleId":"417","severity":1,"message":"418","line":28,"column":33,"nodeType":"377","endLine":28,"endColumn":82},{"ruleId":"417","severity":1,"message":"418","line":29,"column":22,"nodeType":"377","endLine":29,"endColumn":63},{"ruleId":"371","severity":1,"message":"388","line":230,"column":8,"nodeType":"373","endLine":230,"endColumn":10,"suggestions":"419"},{"ruleId":"371","severity":1,"message":"372","line":24,"column":6,"nodeType":"373","endLine":24,"endColumn":23,"suggestions":"420"},{"ruleId":"375","severity":1,"message":"376","line":188,"column":13,"nodeType":"377","endLine":188,"endColumn":16},{"ruleId":"351","severity":1,"message":"399","line":1,"column":17,"nodeType":"353","messageId":"354","endLine":1,"endColumn":23},{"ruleId":"351","severity":1,"message":"392","line":1,"column":44,"nodeType":"353","messageId":"354","endLine":1,"endColumn":53},{"ruleId":"371","severity":1,"message":"421","line":10,"column":74,"nodeType":"373","endLine":10,"endColumn":76,"suggestions":"422"},{"ruleId":"371","severity":1,"message":"423","line":190,"column":53,"nodeType":"373","endLine":190,"endColumn":71,"suggestions":"424"},{"ruleId":"401","severity":1,"message":"402","line":257,"column":13,"nodeType":"403","messageId":"404","endLine":258,"endColumn":27},{"ruleId":"371","severity":1,"message":"388","line":269,"column":8,"nodeType":"373","endLine":269,"endColumn":10,"suggestions":"425"},{"ruleId":"351","severity":1,"message":"399","line":2,"column":17,"nodeType":"353","messageId":"354","endLine":2,"endColumn":23},{"ruleId":"351","severity":1,"message":"392","line":2,"column":25,"nodeType":"353","messageId":"354","endLine":2,"endColumn":34},{"ruleId":"361","severity":1,"message":"362","line":25,"column":14,"nodeType":"363","messageId":"364","endLine":25,"endColumn":16},{"ruleId":"361","severity":1,"message":"362","line":26,"column":13,"nodeType":"363","messageId":"364","endLine":26,"endColumn":15},{"ruleId":"361","severity":1,"message":"362","line":37,"column":25,"nodeType":"363","messageId":"364","endLine":37,"endColumn":27},{"ruleId":"361","severity":1,"message":"362","line":44,"column":25,"nodeType":"363","messageId":"364","endLine":44,"endColumn":27},{"ruleId":"351","severity":1,"message":"399","line":1,"column":17,"nodeType":"353","messageId":"354","endLine":1,"endColumn":23},{"ruleId":"351","severity":1,"message":"426","line":1,"column":25,"nodeType":"353","messageId":"354","endLine":1,"endColumn":33},{"ruleId":"351","severity":1,"message":"392","line":1,"column":44,"nodeType":"353","messageId":"354","endLine":1,"endColumn":53},{"ruleId":"351","severity":1,"message":"427","line":4,"column":8,"nodeType":"353","messageId":"354","endLine":4,"endColumn":12},{"ruleId":"371","severity":1,"message":"428","line":8,"column":83,"nodeType":"373","endLine":8,"endColumn":85,"suggestions":"429"},{"ruleId":"361","severity":1,"message":"362","line":11,"column":17,"nodeType":"363","messageId":"364","endLine":11,"endColumn":19},{"ruleId":"361","severity":1,"message":"362","line":40,"column":22,"nodeType":"363","messageId":"364","endLine":40,"endColumn":24},{"ruleId":"361","severity":1,"message":"362","line":49,"column":22,"nodeType":"363","messageId":"364","endLine":49,"endColumn":24},{"ruleId":"371","severity":1,"message":"372","line":24,"column":6,"nodeType":"373","endLine":24,"endColumn":8,"suggestions":"430"},{"ruleId":"361","severity":1,"message":"362","line":70,"column":12,"nodeType":"363","messageId":"364","endLine":70,"endColumn":14},{"ruleId":"361","severity":1,"message":"362","line":70,"column":28,"nodeType":"363","messageId":"364","endLine":70,"endColumn":30},{"ruleId":"375","severity":1,"message":"376","line":367,"column":13,"nodeType":"377","endLine":367,"endColumn":16},{"ruleId":"351","severity":1,"message":"426","line":1,"column":17,"nodeType":"353","messageId":"354","endLine":1,"endColumn":25},"no-native-reassign",["431"],"no-negated-in-lhs",["432"],"no-unused-vars","'createContext' is defined but never used.","Identifier","unusedVar","'useContext' is defined but never used.","'RootStore' is defined but never used.",["431"],["432"],["431"],["432"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["431"],["432"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","'len_swans' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'coloringFormStore'. Either include it or remove the dependency array.","ArrayExpression",["433"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","React Hook useEffect has missing dependencies: 'coloringFormStore' and 'modelStore'. Either include them or remove the dependency array.",["434"],"'Bars' is defined but never used.","'NavBtn' is defined but never used.","'NavBtnLink' is defined but never used.","Expected '!==' and instead saw '!='.","React Hook useEffect has missing dependencies: 'figStore.modelDimensions.length' and 'figStore.textures'. Either include them or remove the dependency array.",["435"],"React Hook useMemo has a missing dependency: 'figStore.textures'. Either include it or remove the dependency array.",["436"],"React Hook React.useEffect has a missing dependency: 'handleKeyDown'. Either include it or remove the dependency array.",["437"],["431"],["432"],"'useEffect' is defined but never used.","React Hook useEffect has a missing dependency: 'formObject'. Either include it or remove the dependency array.",["438"],"React Hook useEffect has missing dependencies: 'PxModel' and 'formObject'. Either include them or remove the dependency array.",["439"],"'straw' is defined but never used.",["440"],"'useRef' is defined but never used.","'useFrame' is defined but never used.","no-fallthrough","Expected a 'break' statement before 'default'.","SwitchCase","default",["441"],["442"],["443"],"React Hook useEffect has missing dependencies: 'formObject' and 'pixelColor'. Either include them or remove the dependency array.",["444"],"'models' is defined but never used.","'sliders' is defined but never used.","'coloring' is defined but never used.","'downloadbutton' is defined but never used.","'Bullet' is defined but never used.","'SideBySide' is defined but never used.",["445"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.",["446"],["447"],"React Hook useMemo has a missing dependency: 'image'. Either include it or remove the dependency array.",["448"],"React Hook useMemo has an unnecessary dependency: 'display_diameter'. Either exclude it or remove the dependency array.",["449"],["450"],"'useState' is defined but never used.","'grid' is defined but never used.","React Hook useMemo has a missing dependency: 'vertices'. Either include it or remove the dependency array.",["451"],["452"],"no-global-assign","no-unsafe-negation",{"desc":"453","fix":"454"},{"desc":"455","fix":"456"},{"desc":"457","fix":"458"},{"desc":"459","fix":"460"},{"desc":"461","fix":"462"},{"desc":"463","fix":"464"},{"desc":"465","fix":"466"},{"desc":"453","fix":"467"},{"desc":"461","fix":"468"},{"desc":"461","fix":"469"},{"desc":"463","fix":"470"},{"desc":"471","fix":"472"},{"desc":"453","fix":"473"},{"desc":"461","fix":"474"},{"desc":"475","fix":"476"},{"desc":"477","fix":"478"},{"desc":"479","fix":"480"},{"desc":"461","fix":"481"},{"desc":"482","fix":"483"},{"desc":"453","fix":"484"},"Update the dependencies array to be: [coloringFormStore]",{"range":"485","text":"486"},"Update the dependencies array to be: [coloringFormStore, modelStore]",{"range":"487","text":"488"},"Update the dependencies array to be: [figStore.modelDimensions.length, figStore.textures]",{"range":"489","text":"490"},"Update the dependencies array to be: [figStore.textures]",{"range":"491","text":"492"},"Update the dependencies array to be: [handleKeyDown]",{"range":"493","text":"494"},"Update the dependencies array to be: [formObject]",{"range":"495","text":"496"},"Update the dependencies array to be: [PxModel, formObject, formObject.defaultColor]",{"range":"497","text":"498"},{"range":"499","text":"486"},{"range":"500","text":"494"},{"range":"501","text":"494"},{"range":"502","text":"496"},"Update the dependencies array to be: [formObject, formObject.defaultColor, pixelColor]",{"range":"503","text":"504"},{"range":"505","text":"486"},{"range":"506","text":"494"},"Update the dependencies array to be: [coloringFormStore, swanStore.wings]",{"range":"507","text":"508"},"Update the dependencies array to be: [image]",{"range":"509","text":"510"},"Update the dependencies array to be: []",{"range":"511","text":"512"},{"range":"513","text":"494"},"Update the dependencies array to be: [vertices]",{"range":"514","text":"515"},{"range":"516","text":"486"},[778,780],"[coloringFormStore]",[2782,2784],"[coloringFormStore, modelStore]",[722,724],"[figStore.modelDimensions.length, figStore.textures]",[848,850],"[figStore.textures]",[10034,10036],"[handleKeyDown]",[629,631],"[formObject]",[957,982],"[PxModel, formObject, formObject.defaultColor]",[552,554],[4403,4405],[8107,8109],[852,854],[1163,1188],"[formObject, formObject.defaultColor, pixelColor]",[778,780],[9503,9505],[786,803],"[coloringFormStore, swanStore.wings]",[408,410],"[image]",[9219,9237],"[]",[12012,12014],[336,338],"[vertices]",[770,772]]